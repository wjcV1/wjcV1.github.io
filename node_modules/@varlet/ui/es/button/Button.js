import Ripple from '../ripple';
import VarLoading from '../loading';
import { defineComponent, ref } from 'vue';
import { props } from './props';
import { createNamespace } from '../utils/components';
var {
  n,
  classes
} = createNamespace('button');
import { resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, renderSlot as _renderSlot, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, resolveDirective as _resolveDirective, createElementBlock as _createElementBlock, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = ["disabled"];
export function render(_ctx, _cache) {
  var _component_var_loading = _resolveComponent("var-loading");

  var _directive_ripple = _resolveDirective("ripple");

  return _withDirectives((_openBlock(), _createElementBlock("button", {
    class: _normalizeClass(_ctx.classes(_ctx.n(), 'var--box', _ctx.n("--" + _ctx.size), [_ctx.block, "var--flex " + _ctx.n('--block'), 'var--inline-flex'], [_ctx.disabled, _ctx.n('--disabled')], [_ctx.text, _ctx.n("--text-" + _ctx.type) + " " + _ctx.n('--text'), _ctx.n("--" + _ctx.type) + " var-elevation--2"], [_ctx.text && _ctx.disabled, _ctx.n('--text-disabled')], [_ctx.round, _ctx.n('--round')], [_ctx.outline, _ctx.n('--outline')])),
    style: _normalizeStyle({
      color: _ctx.textColor,
      background: _ctx.color
    }),
    disabled: _ctx.disabled,
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.handleClick && _ctx.handleClick(...arguments);
    }),
    onTouchstart: _cache[1] || (_cache[1] = function () {
      return _ctx.handleTouchstart && _ctx.handleTouchstart(...arguments);
    })
  }, [_ctx.loading || _ctx.pending ? (_openBlock(), _createBlock(_component_var_loading, {
    key: 0,
    class: _normalizeClass(_ctx.n('loading')),
    "var-button-cover": "",
    type: _ctx.loadingType,
    size: _ctx.loadingSize,
    radius: _ctx.loadingRadius
  }, null, 8
  /* PROPS */
  , ["class", "type", "size", "radius"])) : _createCommentVNode("v-if", true), _createElementVNode("div", {
    class: _normalizeClass(_ctx.classes(_ctx.n('content'), [_ctx.loading || _ctx.pending, _ctx.n('--hidden')]))
  }, [_renderSlot(_ctx.$slots, "default")], 2
  /* CLASS */
  )], 46
  /* CLASS, STYLE, PROPS, HYDRATE_EVENTS */
  , _hoisted_1)), [[_directive_ripple, {
    disabled: _ctx.disabled || !_ctx.ripple
  }]]);
}
export default defineComponent({
  render,
  name: 'VarButton',
  components: {
    VarLoading
  },
  directives: {
    Ripple
  },
  props,

  setup(props) {
    var pending = ref(false);

    var attemptAutoLoading = result => {
      if (props.autoLoading) {
        pending.value = true;
        Promise.resolve(result).finally(() => {
          pending.value = false;
        });
      }
    };

    var handleClick = e => {
      var {
        loading,
        disabled,
        onClick
      } = props;

      if (!onClick || loading || disabled || pending.value) {
        return;
      }

      attemptAutoLoading(onClick(e));
    };

    var handleTouchstart = e => {
      var {
        loading,
        disabled,
        onTouchstart
      } = props;

      if (!onTouchstart || loading || disabled || pending.value) {
        return;
      }

      attemptAutoLoading(onTouchstart(e));
    };

    return {
      n,
      classes,
      pending,
      handleClick,
      handleTouchstart
    };
  }

});