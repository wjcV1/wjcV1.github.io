import { defineComponent, ref, watch } from 'vue';
import { props } from './props';
import { requestAnimationFrame, cancelAnimationFrame } from '../utils/elements';
import { toNumber } from '@varlet/shared';
import { call, createNamespace } from '../utils/components';
var {
  n
} = createNamespace('countdown');
var SECOND = 1000;
var MINUTE = 60 * SECOND;
var HOUR = 60 * MINUTE;
var DAY = 24 * HOUR;
import { normalizeProps as _normalizeProps, guardReactiveProps as _guardReactiveProps, renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue";
export function render(_ctx, _cache) {
  return _openBlock(), _createElementBlock("div", {
    class: _normalizeClass(_ctx.n())
  }, [_renderSlot(_ctx.$slots, "default", _normalizeProps(_guardReactiveProps(_ctx.timeData)), () => [_createTextVNode(_toDisplayString(_ctx.showTime), 1
  /* TEXT */
  )])], 2
  /* CLASS */
  );
}
export default defineComponent({
  render,
  name: 'VarCountdown',
  props,

  setup(props) {
    var endTime = ref(0);
    var isStart = ref(false);
    var showTime = ref('');
    var handle = ref(0);
    var pauseTime = ref(0);
    var timeData = ref({
      days: 0,
      hours: 0,
      minutes: 0,
      seconds: 0,
      milliseconds: 0
    });

    var parseFormat = (format, time) => {
      var scannedTimes = Object.values(time);
      var scannedFormats = ['DD', 'HH', 'mm', 'ss'];
      var padValues = [24, 60, 60, 1000];
      scannedFormats.forEach((scannedFormat, index) => {
        if (!format.includes(scannedFormat)) {
          scannedTimes[index + 1] += scannedTimes[index] * padValues[index];
        } else {
          format = format.replace(scannedFormat, String(scannedTimes[index]).padStart(2, '0'));
        }
      });

      if (format.includes('S')) {
        var ms = String(scannedTimes[scannedTimes.length - 1]).padStart(3, '0');

        if (format.includes('SSS')) {
          format = format.replace('SSS', ms);
        } else if (format.includes('SS')) {
          format = format.replace('SS', ms.slice(0, 2));
        } else {
          format = format.replace('S', ms.slice(0, 1));
        }
      }

      return format;
    };

    var formatTime = durationTime => {
      var days = Math.floor(durationTime / DAY);
      var hours = Math.floor(durationTime % DAY / HOUR);
      var minutes = Math.floor(durationTime % HOUR / MINUTE);
      var seconds = Math.floor(durationTime % MINUTE / SECOND);
      var milliseconds = Math.floor(durationTime % SECOND);
      var time = {
        days,
        hours,
        minutes,
        seconds,
        milliseconds
      };
      timeData.value = time;
      call(props.onChange, timeData.value);
      showTime.value = parseFormat(props.format, time);
    };

    var countdown = () => {
      var {
        time,
        onEnd,
        autoStart
      } = props;
      var now = Date.now();
      if (!endTime.value) endTime.value = now + toNumber(time);
      var durationTime = endTime.value - now;
      if (durationTime < 0) durationTime = 0;
      pauseTime.value = durationTime;
      formatTime(durationTime);

      if (durationTime === 0) {
        call(onEnd);
        return;
      }

      if (autoStart || isStart.value) handle.value = requestAnimationFrame(countdown);
    }; // expose


    var start = () => {
      if (isStart.value) return;
      isStart.value = true;
      endTime.value = Date.now() + (pauseTime.value || toNumber(props.time));
      countdown();
    }; // expose


    var pause = () => {
      isStart.value = false;
    }; // expose


    var reset = () => {
      endTime.value = 0;
      isStart.value = false;
      cancelAnimationFrame(handle.value);
      countdown();
    };

    watch(() => props.time, () => reset(), {
      immediate: true
    });
    return {
      showTime,
      timeData,
      n,
      start,
      pause,
      reset
    };
  }

});