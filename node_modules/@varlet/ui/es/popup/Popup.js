import { isVNode as _isVNode, withDirectives as _withDirectives, vShow as _vShow, mergeProps as _mergeProps, createVNode as _createVNode } from "vue";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { defineComponent, watch, Transition, Teleport } from 'vue';
import { props } from './props';
import { useLock } from '../context/lock';
import { useZIndex } from '../context/zIndex';
import { addRouteListener, useTeleport, createNamespace } from '../utils/components';



function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !_isVNode(s);
}

var {
  n,
  classes
} = createNamespace('popup');
export default defineComponent({
  name: 'VarPopup',
  inheritAttrs: false,
  props,

  setup(props, _ref) {
    var {
      slots,
      attrs
    } = _ref;
    var {
      zIndex
    } = useZIndex(() => props.show, 3);
    var {
      disabled
    } = useTeleport();

    var hidePopup = () => {
      var _props$onUpdateShow;

      var {
        closeOnClickOverlay,
        onClickOverlay
      } = props;
      onClickOverlay == null ? void 0 : onClickOverlay();

      if (!closeOnClickOverlay) {
        return;
      }

      (_props$onUpdateShow = props['onUpdate:show']) == null ? void 0 : _props$onUpdateShow.call(props, false);
    };

    useLock(() => props.show, () => props.lockScroll);
    watch(() => props.show, newValue => {
      var {
        onOpen,
        onClose
      } = props;
      newValue ? onOpen == null ? void 0 : onOpen() : onClose == null ? void 0 : onClose();
    }); // internal for Dialog

    addRouteListener(() => props.onRouteChange == null ? void 0 : props.onRouteChange());

    var renderOverlay = () => {
      var {
        overlayClass = '',
        overlayStyle
      } = props;
      return _createVNode("div", {
        "class": classes(n('overlay'), overlayClass),
        "style": _extends({
          zIndex: zIndex.value - 1
        }, overlayStyle),
        "onClick": hidePopup
      }, null);
    };

    var renderContent = () => {
      return _createVNode("div", _mergeProps({
        "class": classes(n('content'), 'var-elevation--3', n("--" + props.position)),
        "style": {
          zIndex: zIndex.value
        }
      }, attrs), [slots.default == null ? void 0 : slots.default()]);
    };

    var renderPopup = () => {
      var {
        onOpened,
        onClosed,
        show,
        overlay,
        transition,
        position
      } = props;
      return _createVNode(Transition, {
        "name": "var-fade",
        "onAfterEnter": onOpened,
        "onAfterLeave": onClosed
      }, {
        default: () => [_withDirectives(_createVNode("div", {
          "class": classes('var--box', n()),
          "style": {
            zIndex: zIndex.value - 2
          }
        }, [overlay && renderOverlay(), _createVNode(Transition, {
          "name": transition || "var-pop-" + position
        }, {
          default: () => [show && renderContent()]
        })]), [[_vShow, show]])]
      });
    };

    return () => {
      var {
        teleport
      } = props;

      if (teleport) {
        var _slot;

        return _createVNode(Teleport, {
          "to": teleport,
          "disabled": disabled.value
        }, _isSlot(_slot = renderPopup()) ? _slot : {
          default: () => [_slot]
        });
      }

      return renderPopup();
    };
  }

});