import { defineComponent, ref, onMounted, onBeforeUnmount } from 'vue';
import VarButton from '../button';
import VarIcon from '../icon';
import { props } from './props';
import { isString, throttle, isObject } from '@varlet/shared';
import { easeInOutCubic } from '../utils/shared';
import { getScrollTop, getScrollLeft, scrollTo, getParentScroller, toPxNum, toSizeUnit } from '../utils/elements';
import { call, createNamespace } from '../utils/components';
var {
  n,
  classes
} = createNamespace('back-top');
import { renderSlot as _renderSlot, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, withModifiers as _withModifiers, mergeProps as _mergeProps, createElementVNode as _createElementVNode, Teleport as _Teleport, openBlock as _openBlock, createBlock as _createBlock } from "vue";
export function render(_ctx, _cache) {
  var _component_var_icon = _resolveComponent("var-icon");

  var _component_var_button = _resolveComponent("var-button");

  return _openBlock(), _createBlock(_Teleport, {
    to: "body",
    disabled: _ctx.disabled
  }, [_createElementVNode("div", _mergeProps({
    class: _ctx.classes(_ctx.n(), [_ctx.show, _ctx.n('--active')]),
    ref: "backTopEl",
    style: {
      right: _ctx.toSizeUnit(_ctx.right),
      bottom: _ctx.toSizeUnit(_ctx.bottom)
    }
  }, _ctx.$attrs, {
    onClick: _cache[0] || (_cache[0] = _withModifiers(function () {
      return _ctx.click && _ctx.click(...arguments);
    }, ["stop"]))
  }), [_renderSlot(_ctx.$slots, "default", {}, () => [_createVNode(_component_var_button, {
    type: "primary",
    round: "",
    "var-back-top-cover": ""
  }, {
    default: _withCtx(() => [_createVNode(_component_var_icon, {
      name: "chevron-up"
    })]),
    _: 1
    /* STABLE */

  })])], 16
  /* FULL_PROPS */
  )], 8
  /* PROPS */
  , ["disabled"]);
}
export default defineComponent({
  render,
  name: 'VarBackTop',
  components: {
    VarButton,
    VarIcon
  },
  inheritAttrs: false,
  props,

  setup(props) {
    var show = ref(false);
    var backTopEl = ref(null);
    var disabled = ref(true);
    var target;

    var click = event => {
      call(props.onClick, event);
      var left = getScrollLeft(target);
      scrollTo(target, {
        left,
        duration: props.duration,
        animation: easeInOutCubic
      });
    };

    var scroll = () => {
      show.value = getScrollTop(target) >= toPxNum(props.visibilityHeight);
    };

    var throttleScroll = throttle(scroll, 200);

    var getTarget = () => {
      var {
        target
      } = props;

      if (isString(target)) {
        var el = document.querySelector(props.target);

        if (!el) {
          throw Error('[Varlet] BackTop: target element cannot found');
        }

        return el;
      }

      if (isObject(target)) return target;
      throw Error('[Varlet] BackTop: type of prop "target" should be a selector or an element object');
    };

    onMounted(() => {
      target = props.target ? getTarget() : getParentScroller(backTopEl.value);
      target.addEventListener('scroll', throttleScroll);
      disabled.value = false;
    });
    onBeforeUnmount(() => {
      target.removeEventListener('scroll', throttleScroll);
    });
    return {
      disabled,
      show,
      backTopEl,
      toSizeUnit,
      n,
      classes,
      click
    };
  }

});