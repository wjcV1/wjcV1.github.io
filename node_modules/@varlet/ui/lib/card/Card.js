"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _ripple = _interopRequireDefault(require("../ripple"));

var _icon = _interopRequireDefault(require("../icon"));

var _button = _interopRequireDefault(require("../button"));

var _vue = require("vue");

var _props = require("./props");

var _elements = require("../utils/elements");

var _components = require("../utils/components");

var _zIndex = require("../context/zIndex");

var _lock = require("../context/lock");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('card');
var RIPPLE_DELAY = 500;

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = ["src", "alt"];

function render(_ctx, _cache) {
  var _component_var_icon = (0, _vue.resolveComponent)("var-icon");

  var _component_var_button = (0, _vue.resolveComponent)("var-button");

  var _directive_ripple = (0, _vue.resolveDirective)("ripple");

  return (0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    ref: "card",
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n(), [_ctx.isRow, _ctx.n('--layout-row')], [_ctx.elevation, "var-elevation--" + _ctx.elevation, 'var-elevation--1'])),
    style: (0, _vue.normalizeStyle)({
      zIndex: _ctx.floated ? _ctx.zIndex : undefined
    }),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.onClick && _ctx.onClick(...arguments);
    })
  }, [(0, _vue.createElementVNode)("div", {
    ref: "cardFloater",
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('floater'))),
    style: (0, _vue.normalizeStyle)({
      width: _ctx.floaterWidth,
      height: _ctx.floaterHeight,
      top: _ctx.floaterTop,
      left: _ctx.floaterLeft,
      overflow: _ctx.floaterOverflow,
      position: _ctx.floaterPosition,
      transition: _ctx.floated ? "background-color " + _ctx.floatingDuration + "ms, width " + _ctx.floatingDuration + "ms, height " + _ctx.floatingDuration + "ms, top " + _ctx.floatingDuration + "ms, left " + _ctx.floatingDuration + "ms" : undefined
    })
  }, [(0, _vue.renderSlot)(_ctx.$slots, "image", {}, () => {
    var _ctx$imageHeight;

    return [_ctx.src ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("img", {
      key: 0,
      class: (0, _vue.normalizeClass)(_ctx.n('image')),
      style: (0, _vue.normalizeStyle)({
        objectFit: _ctx.fit,
        height: _ctx.toSizeUnit((_ctx$imageHeight = _ctx.imageHeight) != null ? _ctx$imageHeight : _ctx.height),
        width: _ctx.toSizeUnit(_ctx.imageWidth)
      }),
      src: _ctx.src,
      alt: _ctx.alt
    }, null, 14
    /* CLASS, STYLE, PROPS */
    , _hoisted_1)) : (0, _vue.createCommentVNode)("v-if", true)];
  }), (0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.n('container'))
  }, [(0, _vue.renderSlot)(_ctx.$slots, "title", {}, () => [_ctx.title ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    key: 0,
    class: (0, _vue.normalizeClass)(_ctx.n('title'))
  }, (0, _vue.toDisplayString)(_ctx.title), 3
  /* TEXT, CLASS */
  )) : (0, _vue.createCommentVNode)("v-if", true)]), (0, _vue.renderSlot)(_ctx.$slots, "subtitle", {}, () => [_ctx.subtitle ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    key: 0,
    class: (0, _vue.normalizeClass)(_ctx.n('subtitle'))
  }, (0, _vue.toDisplayString)(_ctx.subtitle), 3
  /* TEXT, CLASS */
  )) : (0, _vue.createCommentVNode)("v-if", true)]), (0, _vue.renderSlot)(_ctx.$slots, "description", {}, () => [_ctx.description ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    key: 0,
    class: (0, _vue.normalizeClass)(_ctx.n('description'))
  }, (0, _vue.toDisplayString)(_ctx.description), 3
  /* TEXT, CLASS */
  )) : (0, _vue.createCommentVNode)("v-if", true)]), _ctx.$slots.extra ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    key: 0,
    class: (0, _vue.normalizeClass)(_ctx.n('footer'))
  }, [(0, _vue.renderSlot)(_ctx.$slots, "extra")], 2
  /* CLASS */
  )) : (0, _vue.createCommentVNode)("v-if", true), _ctx.$slots.content && !_ctx.isRow ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    key: 1,
    class: (0, _vue.normalizeClass)(_ctx.n('content')),
    style: (0, _vue.normalizeStyle)({
      height: _ctx.contentHeight,
      opacity: _ctx.opacity,
      transition: "opacity " + _ctx.floatingDuration * 2 + "ms"
    })
  }, [(0, _vue.renderSlot)(_ctx.$slots, "content")], 6
  /* CLASS, STYLE */
  )) : (0, _vue.createCommentVNode)("v-if", true)], 2
  /* CLASS */
  ), _ctx.showFloatingButtons ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    key: 0,
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('floating-buttons'), 'var--box')),
    style: (0, _vue.normalizeStyle)({
      zIndex: _ctx.zIndex,
      opacity: _ctx.opacity,
      transition: "opacity " + _ctx.floatingDuration * 2 + "ms"
    })
  }, [(0, _vue.renderSlot)(_ctx.$slots, "close-button", {}, () => [(0, _vue.createVNode)(_component_var_button, {
    "var-card-cover": "",
    round: "",
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('close-button'), 'var-elevation--6')),
    onClick: (0, _vue.withModifiers)(_ctx.close, ["stop"])
  }, {
    default: (0, _vue.withCtx)(() => [(0, _vue.createVNode)(_component_var_icon, {
      "var-card-cover": "",
      name: "window-close",
      class: (0, _vue.normalizeClass)(_ctx.n('close-button-icon'))
    }, null, 8
    /* PROPS */
    , ["class"])]),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["class", "onClick"])])], 6
  /* CLASS, STYLE */
  )) : (0, _vue.createCommentVNode)("v-if", true)], 6
  /* CLASS, STYLE */
  ), (0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.n('holder')),
    style: (0, _vue.normalizeStyle)({
      width: _ctx.holderWidth,
      height: _ctx.holderHeight
    })
  }, null, 6
  /* CLASS, STYLE */
  )], 6
  /* CLASS, STYLE */
  )), [[_directive_ripple, {
    disabled: !_ctx.ripple || _ctx.floater
  }]]);
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarCard',
  directives: {
    Ripple: _ripple.default
  },
  components: {
    VarIcon: _icon.default,
    VarButton: _button.default
  },
  props: _props.props,

  setup(props) {
    var card = (0, _vue.ref)(null);
    var cardFloater = (0, _vue.ref)(null);
    var holderWidth = (0, _vue.ref)('auto');
    var holderHeight = (0, _vue.ref)('auto');
    var floaterWidth = (0, _vue.ref)('100%');
    var floaterHeight = (0, _vue.ref)('100%');
    var floaterTop = (0, _vue.ref)('auto');
    var floaterLeft = (0, _vue.ref)('auto');
    var floaterPosition = (0, _vue.ref)(undefined);
    var floaterOverflow = (0, _vue.ref)('hidden');
    var contentHeight = (0, _vue.ref)('0px');
    var opacity = (0, _vue.ref)('0');
    var {
      zIndex
    } = (0, _zIndex.useZIndex)(() => props.floating, 1);
    var isRow = (0, _vue.computed)(() => props.layout === 'row');
    var showFloatingButtons = (0, _vue.ref)(false);
    var floated = (0, _vue.ref)(false);
    (0, _lock.useLock)(() => props.floating, () => isRow);
    var dropdownFloaterTop = 'auto';
    var dropdownFloaterLeft = 'auto';
    var dropper = null;
    var floater = (0, _vue.ref)(null);

    var floating = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* () {
        clearTimeout(floater.value);
        clearTimeout(dropper);
        floater.value = null;
        floater.value = setTimeout( /*#__PURE__*/_asyncToGenerator(function* () {
          var {
            width,
            height,
            left,
            top
          } = card.value.getBoundingClientRect();
          holderWidth.value = (0, _elements.toSizeUnit)(width);
          holderHeight.value = (0, _elements.toSizeUnit)(height);
          floaterWidth.value = holderWidth.value;
          floaterHeight.value = holderHeight.value;
          floaterTop.value = (0, _elements.toSizeUnit)(top);
          floaterLeft.value = (0, _elements.toSizeUnit)(left);
          floaterPosition.value = 'fixed';
          dropdownFloaterTop = floaterTop.value;
          dropdownFloaterLeft = floaterLeft.value;
          showFloatingButtons.value = true;
          yield (0, _elements.doubleRaf)();
          floaterTop.value = '0';
          floaterLeft.value = '0';
          floaterWidth.value = '100vw';
          floaterHeight.value = '100vh';
          contentHeight.value = 'auto';
          opacity.value = '1';
          floaterOverflow.value = 'auto';
          floated.value = true;
        }), props.ripple ? RIPPLE_DELAY : 0);
      });

      return function floating() {
        return _ref.apply(this, arguments);
      };
    }();

    var dropdown = () => {
      clearTimeout(dropper);
      clearTimeout(floater.value);
      floater.value = null;
      floaterWidth.value = holderWidth.value;
      floaterHeight.value = holderHeight.value;
      floaterTop.value = dropdownFloaterTop;
      floaterLeft.value = dropdownFloaterLeft;
      contentHeight.value = '0px';
      opacity.value = '0';
      showFloatingButtons.value = false;
      dropper = setTimeout(() => {
        holderWidth.value = 'auto';
        holderHeight.value = 'auto';
        floaterWidth.value = '100%';
        floaterHeight.value = '100%';
        floaterTop.value = 'auto';
        floaterLeft.value = 'auto';
        dropdownFloaterTop = 'auto';
        dropdownFloaterLeft = 'auto';
        floaterOverflow.value = 'hidden';
        floaterPosition.value = undefined;
        floated.value = false;
      }, props.floatingDuration);
    };

    var close = () => {
      (0, _components.call)(props['onUpdate:floating'], false);
    };

    (0, _vue.watch)(() => props.floating, value => {
      if (isRow.value) return;
      (0, _vue.nextTick)(() => {
        value ? floating() : dropdown();
      });
    }, {
      immediate: true
    });
    return {
      n,
      classes,
      toSizeUnit: _elements.toSizeUnit,
      card,
      cardFloater,
      holderWidth,
      holderHeight,
      floater,
      floaterWidth,
      floaterHeight,
      floaterTop,
      floaterLeft,
      floaterPosition,
      floaterOverflow,
      contentHeight,
      opacity,
      zIndex,
      isRow,
      close,
      showFloatingButtons,
      floated
    };
  }

});

exports.default = _default;