"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _swipe = _interopRequireDefault(require("../swipe"));

var _vue = require("vue");

var _provide = require("./provide");

var _props = require("./props");

var _components = require("../utils/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n
} = (0, _components.createNamespace)('tabs-items');

function render(_ctx, _cache) {
  var _component_var_swipe = (0, _vue.resolveComponent)("var-swipe");

  return (0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_swipe, {
    class: (0, _vue.normalizeClass)(_ctx.n()),
    ref: "swipe",
    loop: _ctx.loop,
    touchable: _ctx.canSwipe,
    indicator: false,
    onChange: _ctx.handleSwipeChange
  }, {
    default: (0, _vue.withCtx)(() => [(0, _vue.renderSlot)(_ctx.$slots, "default")]),
    _: 3
    /* FORWARDED */

  }, 8
  /* PROPS */
  , ["class", "loop", "touchable", "onChange"]);
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarTabsItems',
  components: {
    VarSwipe: _swipe.default
  },
  props: _props.props,

  setup(props) {
    var swipe = (0, _vue.ref)(null);
    var {
      tabItemList,
      bindTabItem,
      length
    } = (0, _provide.useTabItem)();

    var matchName = active => {
      return tabItemList.find(_ref => {
        var {
          name
        } = _ref;
        return active === name.value;
      });
    };

    var matchIndex = active => {
      return tabItemList.find(_ref2 => {
        var {
          index
        } = _ref2;
        return active === index.value;
      });
    };

    var matchActive = active => {
      return matchName(active) || matchIndex(active);
    };

    var handleActiveChange = newValue => {
      var _swipe$value;

      var newActiveTabItemProvider = matchActive(newValue);

      if (!newActiveTabItemProvider) {
        return;
      }

      tabItemList.forEach(_ref3 => {
        var {
          setCurrent
        } = _ref3;
        return setCurrent(false);
      });
      newActiveTabItemProvider.setCurrent(true);
      (_swipe$value = swipe.value) == null ? void 0 : _swipe$value.to(newActiveTabItemProvider.index.value);
    };

    var handleSwipeChange = currentIndex => {
      var _tabItem$name$value;

      var tabItem = tabItemList.find(_ref4 => {
        var {
          index
        } = _ref4;
        return index.value === currentIndex;
      });
      var active = (_tabItem$name$value = tabItem.name.value) != null ? _tabItem$name$value : tabItem.index.value;
      (0, _components.call)(props['onUpdate:active'], active);
    };

    var tabsItemsProvider = {};
    bindTabItem(tabsItemsProvider);
    (0, _vue.watch)(() => props.active, handleActiveChange);
    (0, _vue.watch)(() => length.value, () => handleActiveChange(props.active));
    return {
      swipe,
      n,
      handleSwipeChange
    };
  }

});

exports.default = _default;