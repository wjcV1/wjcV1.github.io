"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _button = _interopRequireDefault(require("../button"));

var _vue = require("vue");

var _props = require("./props");

var _provide = require("./provide");

var _components = require("../utils/components");

var _shared = require("@varlet/shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var {
  n,
  classes
} = (0, _components.createNamespace)('bottom-navigation');
var {
  n: nItem
} = (0, _components.createNamespace)('bottom-navigation-item');
var RIGHT_HALF_SPACE_CLASS = nItem('--right-half-space');
var LEFT_HALF_SPACE_CLASS = nItem('--left-half-space');
var RIGHT_SPACE_CLASS = nItem('--right-space');
var defaultFabProps = {
  type: 'primary'
};

function render(_ctx, _cache) {
  var _component_var_button = (0, _vue.resolveComponent)("var-button");

  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n(), [_ctx.fixed, _ctx.n('--fixed')], [_ctx.border, _ctx.n('--border')], [_ctx.safeArea, _ctx.n('--safe-area')])),
    ref: "bottomNavigationDom",
    style: (0, _vue.normalizeStyle)("z-index:" + _ctx.zIndex)
  }, [(0, _vue.renderSlot)(_ctx.$slots, "default"), _ctx.$slots.fab ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_button, (0, _vue.mergeProps)({
    key: 0,
    class: _ctx.classes(_ctx.n('fab'), [_ctx.length % 2, _ctx.n('--fab-right'), _ctx.n('--fab-center')]),
    "var-bottom-navigation__fab": "",
    onClick: _ctx.handleFabClick
  }, _ctx.fabProps, {
    round: ""
  }), {
    default: (0, _vue.withCtx)(() => [(0, _vue.renderSlot)(_ctx.$slots, "fab")]),
    _: 3
    /* FORWARDED */

  }, 16
  /* FULL_PROPS */
  , ["class", "onClick"])) : (0, _vue.createCommentVNode)("v-if", true)], 6
  /* CLASS, STYLE */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarBottomNavigation',
  components: {
    VarButton: _button.default
  },
  props: _props.props,

  setup(props, _ref) {
    var {
      slots
    } = _ref;
    var bottomNavigationDom = (0, _vue.ref)(null);
    var active = (0, _vue.computed)(() => props.active);
    var activeColor = (0, _vue.computed)(() => props.activeColor);
    var inactiveColor = (0, _vue.computed)(() => props.inactiveColor);
    var fabProps = (0, _vue.ref)({});
    var {
      length,
      bottomNavigationItems,
      bindBottomNavigationItem
    } = (0, _provide.useBottomNavigationItems)();

    var matchBoundary = () => {
      if (length.value === 0 || matchName() || matchIndex()) {
        return;
      }

      handleActiveIndex();
    };

    var matchName = () => {
      return bottomNavigationItems.find(_ref2 => {
        var {
          name
        } = _ref2;
        return active.value === name.value;
      });
    };

    var matchIndex = () => {
      return bottomNavigationItems.find(_ref3 => {
        var {
          index
        } = _ref3;
        return active.value === index.value;
      });
    };

    var handleActiveIndex = () => {
      if (!(0, _shared.isNumber)(active.value)) {
        return;
      }

      if (active.value < 0) {
        (0, _components.call)(props['onUpdate:active'], 0);
      } else if (active.value > length.value - 1) {
        (0, _components.call)(props['onUpdate:active'], length.value - 1);
      }
    };

    var onToggle = changedValue => {
      props.onBeforeChange ? handleBeforeChange(changedValue) : handleChange(changedValue);
    };

    var handleBeforeChange = changedValue => {
      Promise.resolve((0, _components.call)(props.onBeforeChange, changedValue)).then(res => res && handleChange(changedValue));
    };

    var handleChange = changedValue => {
      (0, _components.call)(props['onUpdate:active'], changedValue);
      (0, _components.call)(props.onChange, changedValue);
    };

    var removeMarginClass = () => {
      var bottomNavigationItems = getBottomNavigationItems();
      bottomNavigationItems.forEach(dom => {
        dom.classList.remove(RIGHT_HALF_SPACE_CLASS, LEFT_HALF_SPACE_CLASS, RIGHT_SPACE_CLASS);
      });
    };

    var addMarginClass = length => {
      var bottomNavigationItems = getBottomNavigationItems();
      var itemsNum = bottomNavigationItems.length;
      var isEven = length % 2 === 0;
      bottomNavigationItems.forEach((bottomNavigationItem, i) => {
        handleMarginClass(isEven, bottomNavigationItem, i, itemsNum);
      });
    };

    var handleMarginClass = (isEven, dom, i, length) => {
      var isLast = i === length - 1;

      if (!isEven && isLast) {
        dom.classList.add(RIGHT_SPACE_CLASS);
        return;
      }

      var isFabLeft = i === length / 2 - 1;
      var isFabRight = i === length / 2;

      if (isFabLeft) {
        dom.classList.add(RIGHT_HALF_SPACE_CLASS);
      } else if (isFabRight) {
        dom.classList.add(LEFT_HALF_SPACE_CLASS);
      }
    };

    var getBottomNavigationItems = () => {
      return Array.from(bottomNavigationDom.value.querySelectorAll("." + nItem()));
    };

    var handleFabClick = () => {
      (0, _components.call)(props.onFabClick);
    };

    var bottomNavigationProvider = {
      active,
      activeColor,
      inactiveColor,
      onToggle
    };
    bindBottomNavigationItem(bottomNavigationProvider);
    (0, _vue.watch)(() => length.value, matchBoundary);
    (0, _vue.watch)(() => props.fabProps, newValue => {
      fabProps.value = _extends({}, defaultFabProps, newValue);
    }, {
      immediate: true,
      deep: true
    });
    (0, _vue.onMounted)(() => {
      if (!slots.fab) {
        return;
      }

      addMarginClass(length.value);
    });
    (0, _vue.onUpdated)(() => {
      removeMarginClass();

      if (!slots.fab) {
        return;
      }

      addMarginClass(length.value);
    });
    return {
      n,
      classes,
      length,
      bottomNavigationDom,
      handleFabClick,
      fabProps
    };
  }

});

exports.default = _default;