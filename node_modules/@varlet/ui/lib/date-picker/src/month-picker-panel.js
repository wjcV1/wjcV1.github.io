"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _vue = require("vue");

var _dayjs = _interopRequireDefault(require("dayjs"));

var _isSameOrBefore = _interopRequireDefault(require("dayjs/plugin/isSameOrBefore"));

var _isSameOrAfter = _interopRequireDefault(require("dayjs/plugin/isSameOrAfter"));

var _props = require("../props");

var _panelHeader = _interopRequireDefault(require("./panel-header.js"));

var _button = _interopRequireDefault(require("../../button"));

var _shared = require("@varlet/shared");

var _components = require("../../utils/components");

var _locale = require("../../locale");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

_dayjs.default.extend(_isSameOrBefore.default);

_dayjs.default.extend(_isSameOrAfter.default);

var {
  n,
  classes
} = (0, _components.createNamespace)('month-picker');
var {
  n: nDate
} = (0, _components.createNamespace)('date-picker');

function render(_ctx, _cache) {
  var _component_panel_header = (0, _vue.resolveComponent)("panel-header");

  var _component_var_button = (0, _vue.resolveComponent)("var-button");

  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.n())
  }, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.n('content'))
  }, [(0, _vue.createVNode)(_component_panel_header, {
    ref: "headerEl",
    type: "month",
    date: _ctx.preview,
    disabled: _ctx.panelBtnDisabled,
    onCheckPanel: _ctx.clickYear,
    onCheckDate: _ctx.checkDate
  }, null, 8
  /* PROPS */
  , ["date", "disabled", "onCheckPanel", "onCheckDate"]), (0, _vue.createVNode)(_vue.Transition, {
    name: "" + _ctx.nDate() + (_ctx.reverse ? '-reverse' : '') + "-translatex"
  }, {
    default: (0, _vue.withCtx)(() => [((0, _vue.openBlock)(), (0, _vue.createElementBlock)("ul", {
      key: _ctx.panelKey
    }, [((0, _vue.openBlock)(true), (0, _vue.createElementBlock)(_vue.Fragment, null, (0, _vue.renderList)(_ctx.MONTH_LIST, month => {
      return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", {
        key: month.index
      }, [(0, _vue.createVNode)(_component_var_button, (0, _vue.mergeProps)({
        type: "primary",
        "var-month-picker-cover": "",
        ripple: false
      }, _extends({}, _ctx.buttonProps(month.index)), {
        onClick: event => _ctx.chooseMonth(month, event)
      }), {
        default: (0, _vue.withCtx)(() => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.getMonthAbbr(month.index)), 1
        /* TEXT */
        )]),
        _: 2
        /* DYNAMIC */

      }, 1040
      /* FULL_PROPS, DYNAMIC_SLOTS */
      , ["onClick"])]);
    }), 128
    /* KEYED_FRAGMENT */
    ))]))]),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["name"])], 2
  /* CLASS */
  )], 2
  /* CLASS */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'MonthPickerPanel',
  components: {
    VarButton: _button.default,
    PanelHeader: _panelHeader.default
  },
  props: {
    choose: {
      type: Object,
      required: true
    },
    preview: {
      type: Object,
      required: true
    },
    current: {
      type: String,
      required: true
    },
    clickYear: {
      type: Function,
      required: true
    },
    componentProps: {
      type: Object,
      required: true
    }
  },
  emits: ['check-preview', 'choose-month'],

  setup(props, _ref) {
    var {
      emit
    } = _ref;
    var [currentYear, currentMonth] = props.current.split('-');
    var reverse = (0, _vue.ref)(false);
    var panelKey = (0, _vue.ref)(0);
    var headerEl = (0, _vue.ref)(null);
    var panelBtnDisabled = (0, _vue.reactive)({
      left: false,
      right: false
    });
    var isSameYear = (0, _vue.computed)(() => props.choose.chooseYear === props.preview.previewYear);
    var isCurrentYear = (0, _vue.computed)(() => props.preview.previewYear === currentYear);

    var getMonthAbbr = key => {
      var _pack$value$datePicke, _pack$value$datePicke2;

      return (_pack$value$datePicke = (_pack$value$datePicke2 = _locale.pack.value.datePickerMonthDict) == null ? void 0 : _pack$value$datePicke2[key].abbr) != null ? _pack$value$datePicke : '';
    };

    var inRange = key => {
      var {
        preview: {
          previewYear
        },
        componentProps: {
          min,
          max
        }
      } = props;
      var isBeforeMax = true;
      var isAfterMin = true;
      var previewDate = previewYear + "-" + key;
      if (max) isBeforeMax = (0, _dayjs.default)(previewDate).isSameOrBefore((0, _dayjs.default)(max), 'month');
      if (min) isAfterMin = (0, _dayjs.default)(previewDate).isSameOrAfter((0, _dayjs.default)(min), 'month');
      return isBeforeMax && isAfterMin;
    };

    var shouldChoose = val => {
      var {
        choose: {
          chooseMonths,
          chooseDays,
          chooseRangeMonth
        },
        componentProps: {
          type,
          range
        }
      } = props;

      if (range) {
        if (!chooseRangeMonth.length) return false;
        var isBeforeMax = (0, _dayjs.default)(val).isSameOrBefore((0, _dayjs.default)(chooseRangeMonth[1]), 'month');
        var isAfterMin = (0, _dayjs.default)(val).isSameOrAfter((0, _dayjs.default)(chooseRangeMonth[0]), 'month');
        return isBeforeMax && isAfterMin;
      }

      if (type === 'month') return chooseMonths.includes(val);
      return chooseDays.some(value => value.includes(val));
    };

    var buttonProps = key => {
      var {
        choose: {
          chooseMonth
        },
        preview: {
          previewYear
        },
        componentProps: {
          allowedDates,
          color,
          multiple,
          range
        }
      } = props;
      var val = previewYear + "-" + key;

      var monthExist = () => {
        if (range || multiple) return shouldChoose(val);
        return (chooseMonth == null ? void 0 : chooseMonth.index) === key && isSameYear.value;
      };

      var computeDisabled = () => {
        if (!inRange(key)) return true;
        if (!allowedDates) return false;
        return !allowedDates(val);
      };

      var disabled = computeDisabled();

      var computeText = () => {
        if (disabled) return true;
        if (range || multiple) return !shouldChoose(val);
        return !isSameYear.value || (chooseMonth == null ? void 0 : chooseMonth.index) !== key;
      };

      var computeOutline = () => {
        // 不满足基本条件， 基本条件为当前年、当前月并且 showCurrent 为true的情况
        if (!(isCurrentYear.value && currentMonth === key && props.componentProps.showCurrent)) return false; // 存在着 disabled

        if ((range || multiple || isSameYear.value) && disabled) return true; // 在选择范围之外

        if (range || multiple) return !shouldChoose(val); // 同一年但是未被选择的情况

        if (isSameYear.value) return (chooseMonth == null ? void 0 : chooseMonth.index) !== currentMonth;
        return true;
      };

      var textColorOrCover = () => {
        if (disabled) return '';
        if (computeOutline()) return color != null ? color : '';
        if (monthExist()) return '';
        return nDate() + "-color-cover";
      };

      var isCover = textColorOrCover().startsWith(nDate());
      return {
        outline: computeOutline(),
        text: computeText(),
        color: !computeText() ? color : '',
        textColor: isCover ? '' : textColorOrCover(),
        [nDate() + "-color-cover"]: isCover,
        class: classes(n('button'), [disabled, n('button--disabled')])
      };
    };

    var chooseMonth = (month, event) => {
      var buttonEl = event.currentTarget;
      if (buttonEl.classList.contains(n('button--disabled'))) return;
      emit('choose-month', month);
    };

    var checkDate = checkType => {
      reverse.value = checkType === 'prev';
      panelKey.value += checkType === 'prev' ? -1 : 1;
      emit('check-preview', 'year', checkType);
    }; // expose for internal


    var forwardRef = checkType => {
      headerEl.value.checkDate(checkType);
    };

    (0, _vue.watch)(() => props.preview.previewYear, year => {
      var {
        componentProps: {
          min,
          max
        }
      } = props;
      if (max) panelBtnDisabled.right = !(0, _dayjs.default)("" + ((0, _shared.toNumber)(year) + 1)).isSameOrBefore((0, _dayjs.default)(max), 'year');
      if (min) panelBtnDisabled.left = !(0, _dayjs.default)("" + ((0, _shared.toNumber)(year) - 1)).isSameOrAfter((0, _dayjs.default)(min), 'year');
    }, {
      immediate: true
    });
    return {
      n,
      nDate,
      pack: _locale.pack,
      MONTH_LIST: _props.MONTH_LIST,
      headerEl,
      reverse,
      panelKey,
      panelBtnDisabled,
      forwardRef,
      buttonProps,
      getMonthAbbr,
      chooseMonth,
      checkDate
    };
  }

});

exports.default = _default;