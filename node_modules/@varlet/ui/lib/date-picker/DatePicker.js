"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _vue = require("vue");

var _dayjs = _interopRequireDefault(require("dayjs"));

var _monthPickerPanel = _interopRequireDefault(require("./src/month-picker-panel.js"));

var _yearPickerPanel = _interopRequireDefault(require("./src/year-picker-panel.js"));

var _dayPickerPanel = _interopRequireDefault(require("./src/day-picker-panel.js"));

var _props = require("./props");

var _shared = require("@varlet/shared");

var _elements = require("../utils/elements");

var _components = require("../utils/components");

var _locale = require("../locale");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('date-picker');

function render(_ctx, _cache) {
  var _component_year_picker_panel = (0, _vue.resolveComponent)("year-picker-panel");

  var _component_month_picker_panel = (0, _vue.resolveComponent)("month-picker-panel");

  var _component_day_picker_panel = (0, _vue.resolveComponent)("day-picker-panel");

  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n(), [_ctx.shadow, 'var-elevation--2']))
  }, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.n('title')),
    style: (0, _vue.normalizeStyle)({
      background: _ctx.headerColor || _ctx.color
    })
  }, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('title-year'), [_ctx.isYearPanel, _ctx.n('title-year--active')])),
    onClick: _cache[0] || (_cache[0] = $event => _ctx.clickEl('year'))
  }, [(0, _vue.renderSlot)(_ctx.$slots, "year", {
    year: _ctx.chooseYear
  }, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.chooseYear), 1
  /* TEXT */
  )])], 2
  /* CLASS */
  ), (0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('title-date'), [!_ctx.isYearPanel, _ctx.n('title-date--active')], [_ctx.range, _ctx.n('title-date--range')])),
    onClick: _cache[1] || (_cache[1] = $event => _ctx.clickEl('date'))
  }, [(0, _vue.createVNode)(_vue.Transition, {
    name: _ctx.multiple ? '' : "" + _ctx.n() + (_ctx.reverse ? '-reverse' : '') + "-translatey"
  }, {
    default: (0, _vue.withCtx)(() => {
      var _ctx$chooseMonth, _ctx$chooseMonth2, _ctx$chooseMonth3;

      return [_ctx.type === 'month' ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
        key: "" + _ctx.chooseYear + ((_ctx$chooseMonth = _ctx.chooseMonth) == null ? void 0 : _ctx$chooseMonth.index)
      }, [_ctx.range ? (0, _vue.renderSlot)(_ctx.$slots, "range", {
        key: 0,
        choose: _ctx.getChoose.chooseRangeMonth
      }, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.getMonthTitle), 1
      /* TEXT */
      )]) : _ctx.multiple ? (0, _vue.renderSlot)(_ctx.$slots, "multiple", {
        key: 1,
        choose: _ctx.getChoose.chooseMonths
      }, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.getMonthTitle), 1
      /* TEXT */
      )]) : (0, _vue.renderSlot)(_ctx.$slots, "month", {
        key: 2,
        month: (_ctx$chooseMonth2 = _ctx.chooseMonth) == null ? void 0 : _ctx$chooseMonth2.index,
        year: _ctx.chooseYear
      }, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.getMonthTitle), 1
      /* TEXT */
      )])])) : ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
        key: "" + _ctx.chooseYear + ((_ctx$chooseMonth3 = _ctx.chooseMonth) == null ? void 0 : _ctx$chooseMonth3.index) + _ctx.chooseDay
      }, [_ctx.range ? (0, _vue.renderSlot)(_ctx.$slots, "range", {
        key: 0,
        choose: _ctx.formatRange
      }, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.getDateTitle), 1
      /* TEXT */
      )]) : _ctx.multiple ? (0, _vue.renderSlot)(_ctx.$slots, "multiple", {
        key: 1,
        choose: _ctx.getChoose.chooseDays
      }, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.getDateTitle), 1
      /* TEXT */
      )]) : (0, _vue.renderSlot)(_ctx.$slots, "date", (0, _vue.normalizeProps)((0, _vue.mergeProps)({
        key: 2
      }, _ctx.slotProps)), () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.getDateTitle), 1
      /* TEXT */
      )])]))];
    }),
    _: 3
    /* FORWARDED */

  }, 8
  /* PROPS */
  , ["name"])], 2
  /* CLASS */
  )], 6
  /* CLASS, STYLE */
  ), (0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.n('body')),
    onTouchstart: _cache[2] || (_cache[2] = function () {
      return _ctx.handleTouchstart && _ctx.handleTouchstart(...arguments);
    }),
    onTouchmove: _cache[3] || (_cache[3] = function () {
      return _ctx.handleTouchmove && _ctx.handleTouchmove(...arguments);
    }),
    onTouchend: _cache[4] || (_cache[4] = function () {
      return _ctx.handleTouchend && _ctx.handleTouchend(...arguments);
    })
  }, [(0, _vue.createVNode)(_vue.Transition, {
    name: _ctx.n() + "-panel-fade"
  }, {
    default: (0, _vue.withCtx)(() => [_ctx.getPanelType === 'year' ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_year_picker_panel, {
      key: 0,
      "component-props": _ctx.componentProps,
      preview: _ctx.previewYear,
      onChooseYear: _ctx.getChooseYear
    }, null, 8
    /* PROPS */
    , ["component-props", "preview", "onChooseYear"])) : _ctx.getPanelType === 'month' ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_month_picker_panel, {
      key: 1,
      ref: "monthPanelEl",
      current: _ctx.currentDate,
      choose: _ctx.getChoose,
      preview: _ctx.getPreview,
      "click-year": () => _ctx.clickEl('year'),
      "component-props": _ctx.componentProps,
      onChooseMonth: _ctx.getChooseMonth,
      onCheckPreview: _ctx.checkPreview
    }, null, 8
    /* PROPS */
    , ["current", "choose", "preview", "click-year", "component-props", "onChooseMonth", "onCheckPreview"])) : _ctx.getPanelType === 'date' ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_day_picker_panel, {
      key: 2,
      ref: "dayPanelEl",
      current: _ctx.currentDate,
      choose: _ctx.getChoose,
      preview: _ctx.getPreview,
      "component-props": _ctx.componentProps,
      "click-month": () => _ctx.clickEl('month'),
      onChooseDay: _ctx.getChooseDay,
      onCheckPreview: _ctx.checkPreview
    }, null, 8
    /* PROPS */
    , ["current", "choose", "preview", "component-props", "click-month", "onChooseDay", "onCheckPreview"])) : (0, _vue.createCommentVNode)("v-if", true)]),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["name"])], 34
  /* CLASS, HYDRATE_EVENTS */
  )], 2
  /* CLASS */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarDatePicker',
  components: {
    MonthPickerPanel: _monthPickerPanel.default,
    YearPickerPanel: _yearPickerPanel.default,
    DayPickerPanel: _dayPickerPanel.default
  },
  props: _props.props,

  setup(props) {
    var startX = 0;
    var startY = 0;
    var checkType = '';
    var touchDirection;
    var currentDate = (0, _dayjs.default)().format('YYYY-MM-D');
    var [currentYear, currentMonth] = currentDate.split('-');

    var monthDes = _props.MONTH_LIST.find(month => month.index === currentMonth);

    var isYearPanel = (0, _vue.ref)(false);
    var isMonthPanel = (0, _vue.ref)(false);
    var rangeDone = (0, _vue.ref)(true);
    var chooseMonth = (0, _vue.ref)();
    var chooseYear = (0, _vue.ref)();
    var chooseDay = (0, _vue.ref)();
    var previewMonth = (0, _vue.ref)(monthDes);
    var previewYear = (0, _vue.ref)(currentYear);
    var reverse = (0, _vue.ref)(false);
    var chooseMonths = (0, _vue.ref)([]);
    var chooseDays = (0, _vue.ref)([]);
    var chooseRangeMonth = (0, _vue.ref)([]);
    var chooseRangeDay = (0, _vue.ref)([]);
    var monthPanelEl = (0, _vue.ref)(null);
    var dayPanelEl = (0, _vue.ref)(null);
    var componentProps = (0, _vue.reactive)({
      allowedDates: props.allowedDates,
      type: props.type,
      color: props.color,
      firstDayOfWeek: props.firstDayOfWeek,
      min: props.min,
      max: props.max,
      showCurrent: props.showCurrent,
      multiple: props.multiple,
      range: props.range
    });
    var getChoose = (0, _vue.computed)(() => ({
      chooseMonth: chooseMonth.value,
      chooseYear: chooseYear.value,
      chooseDay: chooseDay.value,
      chooseMonths: chooseMonths.value,
      chooseDays: chooseDays.value,
      chooseRangeMonth: chooseRangeMonth.value,
      chooseRangeDay: chooseRangeDay.value
    }));
    var getPreview = (0, _vue.computed)(() => ({
      previewMonth: previewMonth.value,
      previewYear: previewYear.value
    }));
    var getMonthTitle = (0, _vue.computed)(() => {
      var {
        multiple,
        range
      } = props;

      if (range) {
        return chooseRangeMonth.value.length ? chooseRangeMonth.value[0] + " ~ " + chooseRangeMonth.value[1] : '';
      }

      var monthName = '';

      if (chooseMonth.value) {
        var _pack$value$datePicke, _pack$value$datePicke2;

        monthName = (_pack$value$datePicke = (_pack$value$datePicke2 = _locale.pack.value.datePickerMonthDict) == null ? void 0 : _pack$value$datePicke2[chooseMonth.value.index].name) != null ? _pack$value$datePicke : '';
      }

      return multiple ? "" + chooseMonths.value.length + _locale.pack.value.datePickerSelected : monthName;
    });
    var getDateTitle = (0, _vue.computed)(() => {
      var _pack$value$datePicke3, _pack$value$datePicke4, _pack$value$datePicke5, _pack$value$datePicke6;

      var {
        multiple,
        range
      } = props;

      if (range) {
        var formatRangeDays = chooseRangeDay.value.map(date => (0, _dayjs.default)(date).format('YYYY-MM-DD'));
        return formatRangeDays.length ? formatRangeDays[0] + " ~ " + formatRangeDays[1] : '';
      }

      if (multiple) return "" + chooseDays.value.length + _locale.pack.value.datePickerSelected;
      if (!chooseYear.value || !chooseMonth.value || !chooseDay.value) return '';
      var weekIndex = (0, _dayjs.default)(chooseYear.value + "-" + chooseMonth.value.index + "-" + chooseDay.value).day();

      var week = _props.WEEK_HEADER.find(value => value.index === "" + weekIndex);

      var weekName = (_pack$value$datePicke3 = (_pack$value$datePicke4 = _locale.pack.value.datePickerWeekDict) == null ? void 0 : _pack$value$datePicke4[week.index].name) != null ? _pack$value$datePicke3 : '';
      var monthName = (_pack$value$datePicke5 = (_pack$value$datePicke6 = _locale.pack.value.datePickerMonthDict) == null ? void 0 : _pack$value$datePicke6[chooseMonth.value.index].name) != null ? _pack$value$datePicke5 : '';
      var showDay = chooseDay.value.padStart(2, '0');
      if (_locale.pack.value.lang === 'zh-CN') return chooseMonth.value.index + "-" + showDay + " " + weekName.slice(0, 3);
      return weekName.slice(0, 3) + ", " + monthName.slice(0, 3) + " " + chooseDay.value;
    });
    var getPanelType = (0, _vue.computed)(() => {
      if (isYearPanel.value) return 'year';
      if (props.type === 'month' || isMonthPanel.value) return 'month';
      if (props.type === 'date') return 'date';
      return '';
    });
    var isUntouchable = (0, _vue.computed)(() => {
      return !props.touchable || ['', 'year'].includes(getPanelType.value);
    });
    var slotProps = (0, _vue.computed)(() => {
      var _chooseMonth$value, _chooseDay$value, _chooseYear$value, _chooseMonth$value$in, _chooseMonth$value2;

      var weekIndex = (0, _dayjs.default)(chooseYear.value + "-" + ((_chooseMonth$value = chooseMonth.value) == null ? void 0 : _chooseMonth$value.index) + "-" + chooseDay.value).day();
      var date = chooseDay.value ? (_chooseDay$value = chooseDay.value) == null ? void 0 : _chooseDay$value.padStart(2, '0') : '';
      return {
        week: "" + weekIndex,
        year: (_chooseYear$value = chooseYear.value) != null ? _chooseYear$value : '',
        month: (_chooseMonth$value$in = (_chooseMonth$value2 = chooseMonth.value) == null ? void 0 : _chooseMonth$value2.index) != null ? _chooseMonth$value$in : '',
        date
      };
    });
    var formatRange = (0, _vue.computed)(() => getChoose.value.chooseRangeDay.map(choose => (0, _dayjs.default)(choose).format('YYYY-MM-DD')));
    var isSameYear = (0, _vue.computed)(() => chooseYear.value === previewYear.value);
    var isSameMonth = (0, _vue.computed)(() => {
      var _chooseMonth$value3;

      return ((_chooseMonth$value3 = chooseMonth.value) == null ? void 0 : _chooseMonth$value3.index) === previewMonth.value.index;
    });

    var clickEl = type => {
      if (type === 'year') isYearPanel.value = true;else if (type === 'month') isMonthPanel.value = true;else {
        isYearPanel.value = false;
        isMonthPanel.value = false;
      }
    };

    var handleTouchstart = event => {
      if (isUntouchable.value) return;
      var {
        clientX,
        clientY
      } = event.touches[0];
      startX = clientX;
      startY = clientY;
    };

    var getDirection = (x, y) => {
      return x >= y && x > 20 ? 'x' : 'y';
    };

    var handleTouchmove = event => {
      if (isUntouchable.value) return;
      var {
        clientX,
        clientY
      } = event.touches[0];
      var x = clientX - startX;
      var y = clientY - startY;
      touchDirection = getDirection(Math.abs(x), Math.abs(y));
      checkType = x > 0 ? 'prev' : 'next';
    };

    var handleTouchend = () => {
      if (isUntouchable.value || touchDirection !== 'x') return;
      var componentRef = getPanelType.value === 'month' ? monthPanelEl : dayPanelEl;
      (0, _elements.nextTickFrame)(() => {
        componentRef.value.forwardRef(checkType);
        resetState();
      });
    };

    var updateRange = (date, type) => {
      var rangeDate = type === 'month' ? chooseRangeMonth : chooseRangeDay;
      rangeDate.value = rangeDone.value ? [date, date] : [rangeDate.value[0], date];
      rangeDone.value = !rangeDone.value;

      if (rangeDone.value) {
        var isChangeOrder = (0, _dayjs.default)(rangeDate.value[0]).isAfter(rangeDate.value[1]);

        var _date = isChangeOrder ? [rangeDate.value[1], rangeDate.value[0]] : [...rangeDate.value];

        (0, _components.call)(props['onUpdate:modelValue'], _date);
        (0, _components.call)(props.onChange, _date);
      }
    };

    var updateMultiple = (date, type) => {
      var multipleDates = type === 'month' ? chooseMonths : chooseDays;
      var formatType = type === 'month' ? 'YYYY-MM' : 'YYYY-MM-DD';
      var formatDates = multipleDates.value.map(date => (0, _dayjs.default)(date).format(formatType));
      var index = formatDates.findIndex(choose => choose === date);
      if (index === -1) formatDates.push(date);else formatDates.splice(index, 1);
      (0, _components.call)(props['onUpdate:modelValue'], formatDates);
      (0, _components.call)(props.onChange, formatDates);
    };

    var getReverse = (dateType, date) => {
      if (!chooseYear.value || !chooseMonth.value) return false;
      if (!isSameYear.value) return chooseYear.value > previewYear.value;
      if (dateType === 'month') return date.index < chooseMonth.value.index;
      return isSameMonth.value ? date < (0, _shared.toNumber)(chooseDay.value) : chooseMonth.value.index > previewMonth.value.index;
    };

    var getChooseDay = day => {
      var {
        readonly,
        range,
        multiple,
        onChange,
        'onUpdate:modelValue': updateModelValue
      } = props;
      if (day < 0 || readonly) return;
      reverse.value = getReverse('day', day);
      var date = previewYear.value + "-" + previewMonth.value.index + "-" + day;
      var formatDate = (0, _dayjs.default)(date).format('YYYY-MM-DD');
      if (range) updateRange(formatDate, 'day');else if (multiple) updateMultiple(formatDate, 'day');else {
        (0, _components.call)(updateModelValue, formatDate);
        (0, _components.call)(onChange, formatDate);
      }
    };

    var getChooseMonth = month => {
      var {
        type,
        readonly,
        range,
        multiple,
        onChange,
        onPreview,
        'onUpdate:modelValue': updateModelValue
      } = props;
      reverse.value = getReverse('month', month);

      if (type === 'month' && !readonly) {
        var date = previewYear.value + "-" + month.index;
        if (range) updateRange(date, 'month');else if (multiple) updateMultiple(date, 'month');else {
          (0, _components.call)(updateModelValue, date);
          (0, _components.call)(onChange, date);
        }
      } else {
        previewMonth.value = month;
        (0, _components.call)(onPreview, (0, _shared.toNumber)(previewYear.value), (0, _shared.toNumber)(previewMonth.value.index));
      }

      isMonthPanel.value = false;
    };

    var getChooseYear = year => {
      previewYear.value = "" + year;
      isYearPanel.value = false;
      isMonthPanel.value = true;
      (0, _components.call)(props.onPreview, (0, _shared.toNumber)(previewYear.value), (0, _shared.toNumber)(previewMonth.value.index));
    };

    var checkPreview = (type, checkType) => {
      var changeValue = checkType === 'prev' ? -1 : 1;

      if (type === 'year') {
        previewYear.value = "" + ((0, _shared.toNumber)(previewYear.value) + changeValue);
      } else {
        var checkIndex = (0, _shared.toNumber)(previewMonth.value.index) + changeValue;

        if (checkIndex < 1) {
          previewYear.value = "" + ((0, _shared.toNumber)(previewYear.value) - 1);
          checkIndex = 12;
        }

        if (checkIndex > 12) {
          previewYear.value = "" + ((0, _shared.toNumber)(previewYear.value) + 1);
          checkIndex = 1;
        }

        previewMonth.value = _props.MONTH_LIST.find(month => (0, _shared.toNumber)(month.index) === checkIndex);
      }

      (0, _components.call)(props.onPreview, (0, _shared.toNumber)(previewYear.value), (0, _shared.toNumber)(previewMonth.value.index));
    };

    var checkValue = () => {
      if ((props.multiple || props.range) && !(0, _shared.isArray)(props.modelValue)) {
        console.error('[Varlet] DatePicker: type of prop "modelValue" should be an Array');
        return false;
      }

      if (!props.multiple && !props.range && (0, _shared.isArray)(props.modelValue)) {
        console.error('[Varlet] DatePicker: type of prop "modelValue" should be a String');
        return false;
      }

      return true;
    };

    var invalidFormatDate = date => {
      if ((0, _shared.isArray)(date)) return false;

      if (date === 'Invalid Date') {
        console.error('[Varlet] DatePicker: "modelValue" is an Invalid Date');
        return true;
      }

      return false;
    };

    var rangeInit = (value, type) => {
      var rangeDate = type === 'month' ? chooseRangeMonth : chooseRangeDay;
      var formatType = type === 'month' ? 'YYYY-MM' : 'YYYY-MM-D';
      var formatDateList = value.map(choose => (0, _dayjs.default)(choose).format(formatType)).slice(0, 2);
      var isValid = rangeDate.value.some(date => invalidFormatDate(date));
      if (isValid) return;
      rangeDate.value = formatDateList;
      var isChangeOrder = (0, _dayjs.default)(rangeDate.value[0]).isAfter(rangeDate.value[1]);

      if (rangeDate.value.length === 2 && isChangeOrder) {
        rangeDate.value = [rangeDate.value[1], rangeDate.value[0]];
      }
    };

    var multipleInit = (value, type) => {
      var rangeDate = type === 'month' ? chooseMonths : chooseDays;
      var formatType = type === 'month' ? 'YYYY-MM' : 'YYYY-MM-D'; // 需要去重

      var formatDateList = Array.from(new Set(value.map(choose => (0, _dayjs.default)(choose).format(formatType))));
      rangeDate.value = formatDateList.filter(date => date !== 'Invalid Date');
    };

    var dateInit = value => {
      var formatDate = (0, _dayjs.default)(value).format('YYYY-MM-D');
      if (invalidFormatDate(formatDate)) return;
      var [yearValue, monthValue, dayValue] = formatDate.split('-');

      var monthDes = _props.MONTH_LIST.find(month => month.index === monthValue);

      chooseMonth.value = monthDes;
      chooseYear.value = yearValue;
      chooseDay.value = dayValue;
      previewMonth.value = monthDes;
      previewYear.value = yearValue;
    };

    var resetState = () => {
      startY = 0;
      startX = 0;
      checkType = '';
      touchDirection = undefined;
    };

    (0, _vue.watch)(() => props.modelValue, value => {
      if (!checkValue() || invalidFormatDate(value) || !value) return;

      if (props.range) {
        if (!(0, _shared.isArray)(value)) return;
        rangeDone.value = value.length !== 1;
        rangeInit(value, props.type);
      } else if (props.multiple) {
        if (!(0, _shared.isArray)(value)) return;
        multipleInit(value, props.type);
      } else {
        dateInit(value);
      }
    }, {
      immediate: true
    });
    (0, _vue.watch)(getPanelType, resetState);
    return {
      n,
      classes,
      monthPanelEl,
      dayPanelEl,
      reverse,
      currentDate,
      chooseMonth,
      chooseYear,
      chooseDay,
      previewYear,
      isYearPanel,
      isMonthPanel,
      getMonthTitle,
      getDateTitle,
      getPanelType,
      getChoose,
      getPreview,
      componentProps,
      slotProps,
      formatRange,
      clickEl,
      handleTouchstart,
      handleTouchmove,
      handleTouchend,
      getChooseDay,
      getChooseMonth,
      getChooseYear,
      checkPreview
    };
  }

});

exports.default = _default;