"use strict";

exports.__esModule = true;
exports.default = exports._DialogComponent = void 0;

var _Dialog = _interopRequireDefault(require("./Dialog.js"));

var _vue = require("vue");

var _shared = require("@varlet/shared");

var _components = require("../utils/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var singletonOptions;

function Dialog(options) {
  if (!(0, _shared.inBrowser)()) {
    return Promise.resolve();
  }

  return new Promise(resolve => {
    Dialog.close();
    var dialogOptions = (0, _shared.isString)(options) || (0, _shared.isNumber)(options) ? {
      message: String(options)
    } : options;
    var reactiveDialogOptions = (0, _vue.reactive)(dialogOptions);
    reactiveDialogOptions.teleport = 'body';
    singletonOptions = reactiveDialogOptions;
    var {
      unmountInstance
    } = (0, _components.mountInstance)(_Dialog.default, reactiveDialogOptions, {
      onConfirm: () => {
        reactiveDialogOptions.onConfirm == null ? void 0 : reactiveDialogOptions.onConfirm();
        resolve('confirm');
      },
      onCancel: () => {
        reactiveDialogOptions.onCancel == null ? void 0 : reactiveDialogOptions.onCancel();
        resolve('cancel');
      },
      onClose: () => {
        reactiveDialogOptions.onClose == null ? void 0 : reactiveDialogOptions.onClose();
        resolve('close');
      },
      onClosed: () => {
        reactiveDialogOptions.onClosed == null ? void 0 : reactiveDialogOptions.onClosed();
        unmountInstance();
        singletonOptions === reactiveDialogOptions && (singletonOptions = null);
      },
      onRouteChange: () => {
        unmountInstance();
        singletonOptions === reactiveDialogOptions && (singletonOptions = null);
      },
      'onUpdate:show': value => {
        reactiveDialogOptions.show = value;
      }
    });
    reactiveDialogOptions.show = true;
  });
}

_Dialog.default.install = function (app) {
  app.component(_Dialog.default.name, _Dialog.default);
};

Dialog.install = function (app) {
  app.component(_Dialog.default.name, _Dialog.default);
};

Dialog.close = () => {
  if (singletonOptions != null) {
    var prevSingletonOptions = singletonOptions;
    singletonOptions = null;
    (0, _vue.nextTick)().then(() => {
      prevSingletonOptions.show = false;
    });
  }
};

Dialog.Component = _Dialog.default;
var _DialogComponent = _Dialog.default;
exports._DialogComponent = _DialogComponent;
var _default = Dialog;
exports.default = _default;