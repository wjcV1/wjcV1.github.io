"use strict";

exports.__esModule = true;
exports.use = exports.packs = exports.pack = exports.merge = exports.default = exports.add = exports._LocaleComponent = void 0;
exports.useLocale = useLocale;

var _vue = require("vue");

var _zhCN = _interopRequireDefault(require("./zh-CN"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function useLocale() {
  var packs = {};
  var pack = (0, _vue.ref)({});

  var add = (lang, pack) => {
    pack.lang = lang;
    packs[lang] = pack;
  };

  var use = lang => {
    if (!packs[lang]) {
      console.warn("The " + lang + " does not exist. You can mount a language package using the add method");
      return {};
    }

    pack.value = packs[lang];
  };

  var merge = (lang, pack) => {
    if (!packs[lang]) {
      console.warn("The " + lang + " does not exist. You can mount a language package using the add method");
      return;
    }

    packs[lang] = _extends({}, packs[lang], pack);
    use(lang);
  };

  return {
    packs,
    pack,
    add,
    use,
    merge
  };
}

var {
  packs,
  pack,
  add,
  use,
  merge
} = useLocale();
exports.merge = merge;
exports.use = use;
exports.add = add;
exports.pack = pack;
exports.packs = packs;
add('zh-CN', _zhCN.default);
use('zh-CN');
var _LocaleComponent = {
  packs,
  pack,
  add,
  use,
  merge,
  useLocale
};
exports._LocaleComponent = _LocaleComponent;
var _default = {
  packs,
  pack,
  add,
  use,
  merge,
  useLocale
};
exports.default = _default;