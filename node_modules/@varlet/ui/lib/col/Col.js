"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _vue = require("vue");

var _shared = require("@varlet/shared");

var _props = require("./props");

var _provide = require("./provide");

var _elements = require("../utils/elements");

var _components = require("../utils/components");

var {
  n,
  classes
} = (0, _components.createNamespace)('col');

function render(_ctx, _cache) {
  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n(), 'var--box', [_ctx.span >= 0, _ctx.n("--span-" + _ctx.span)], [_ctx.offset, _ctx.n("--offset-" + _ctx.offset)], ..._ctx.getSize('xs', _ctx.xs), ..._ctx.getSize('sm', _ctx.sm), ..._ctx.getSize('md', _ctx.md), ..._ctx.getSize('lg', _ctx.lg), ..._ctx.getSize('xl', _ctx.xl))),
    style: (0, _vue.normalizeStyle)({
      paddingLeft: _ctx.toSizeUnit(_ctx.padding.left),
      paddingRight: _ctx.toSizeUnit(_ctx.padding.right)
    }),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.onClick && _ctx.onClick(...arguments);
    })
  }, [(0, _vue.renderSlot)(_ctx.$slots, "default")], 6
  /* CLASS, STYLE */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarCol',
  props: _props.props,

  setup(props) {
    var padding = (0, _vue.ref)({
      left: 0,
      right: 0
    });
    var span = (0, _vue.computed)(() => (0, _shared.toNumber)(props.span));
    var offset = (0, _vue.computed)(() => (0, _shared.toNumber)(props.offset));
    var {
      row,
      bindRow
    } = (0, _provide.useRow)();
    var colProvider = {
      setPadding(pad) {
        padding.value = pad;
      }

    };

    var getSize = (mode, size) => {
      var classes = [];

      if (size == null) {
        return classes;
      }

      if ((0, _shared.isPlainObject)(size)) {
        var {
          offset: _offset,
          span: _span
        } = size;
        Number(_span) >= 0 && classes.push(n("--span-" + mode + "-" + _span));
        _offset && classes.push(n("--offset-" + mode + "-" + _offset));
      } else {
        Number(size) >= 0 && classes.push(n("--span-" + mode + "-" + size));
      }

      return classes;
    };

    (0, _vue.watch)([() => props.span, () => props.offset], () => {
      row == null ? void 0 : row.computePadding();
    });
    (0, _components.call)(bindRow, colProvider);
    return {
      n,
      classes,
      padding,
      toNumber: _shared.toNumber,
      toSizeUnit: _elements.toSizeUnit,
      getSize,
      span,
      offset
    };
  }

});

exports.default = _default;