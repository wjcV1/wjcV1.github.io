"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _ripple = _interopRequireDefault(require("../ripple"));

var _popup = _interopRequireDefault(require("../popup"));

var _icon = _interopRequireDefault(require("../icon"));

var _vue = require("vue");

var _props = require("./props");

var _shared = require("../utils/shared");

var _locale = require("../locale");

var _components = require("../utils/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('action-sheet');

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = ["onClick"];

function render(_ctx, _cache) {
  var _component_var_icon = (0, _vue.resolveComponent)("var-icon");

  var _component_var_popup = (0, _vue.resolveComponent)("var-popup");

  var _directive_ripple = (0, _vue.resolveDirective)("ripple");

  return (0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_popup, (0, _vue.mergeProps)({
    class: _ctx.n('popup-radius'),
    position: "bottom",
    overlay: _ctx.overlay,
    "overlay-class": _ctx.overlayClass,
    "overlay-style": _ctx.overlayStyle,
    "lock-scroll": _ctx.lockScroll,
    "close-on-click-overlay": _ctx.closeOnClickOverlay,
    teleport: _ctx.teleport,
    show: _ctx.popupShow
  }, {
    'onUpdate:show': _ctx.handlePopupUpdateShow
  }, {
    onOpen: _ctx.onOpen,
    onClose: _ctx.onClose,
    onClosed: _ctx.onClosed,
    onOpened: _ctx.onOpened,
    onRouteChange: _ctx.onRouteChange
  }), {
    default: (0, _vue.withCtx)(() => [(0, _vue.createElementVNode)("div", (0, _vue.mergeProps)({
      class: _ctx.classes(_ctx.n(), 'var--box')
    }, _ctx.$attrs), [(0, _vue.renderSlot)(_ctx.$slots, "title", {}, () => [(0, _vue.createElementVNode)("div", {
      class: (0, _vue.normalizeClass)(_ctx.n('title'))
    }, (0, _vue.toDisplayString)(_ctx.dt(_ctx.title, _ctx.pack.actionSheetTitle)), 3
    /* TEXT, CLASS */
    )]), (0, _vue.renderSlot)(_ctx.$slots, "actions", {}, () => [((0, _vue.openBlock)(true), (0, _vue.createElementBlock)(_vue.Fragment, null, (0, _vue.renderList)(_ctx.actions, action => {
      return (0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
        class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('action-item'), action.className, [action.disabled, _ctx.n('--disabled')])),
        key: action.name,
        style: (0, _vue.normalizeStyle)({
          color: action.color
        }),
        onClick: $event => _ctx.handleSelect(action)
      }, [action.icon ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_icon, {
        key: 0,
        class: (0, _vue.normalizeClass)(_ctx.n('action-icon')),
        "var-action-sheet-cover": "",
        name: action.icon,
        size: action.iconSize
      }, null, 8
      /* PROPS */
      , ["class", "name", "size"])) : (0, _vue.createCommentVNode)("v-if", true), (0, _vue.createElementVNode)("div", {
        class: (0, _vue.normalizeClass)(_ctx.n('action-name'))
      }, (0, _vue.toDisplayString)(action.name), 3
      /* TEXT, CLASS */
      )], 14
      /* CLASS, STYLE, PROPS */
      , _hoisted_1)), [[_directive_ripple, {
        disabled: action.disabled
      }]]);
    }), 128
    /* KEYED_FRAGMENT */
    ))])], 16
    /* FULL_PROPS */
    )]),
    _: 3
    /* FORWARDED */

  }, 16
  /* FULL_PROPS */
  , ["class", "overlay", "overlay-class", "overlay-style", "lock-scroll", "close-on-click-overlay", "teleport", "show", "onOpen", "onClose", "onClosed", "onOpened", "onRouteChange"]);
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarActionSheet',
  directives: {
    Ripple: _ripple.default
  },
  components: {
    VarPopup: _popup.default,
    VarIcon: _icon.default
  },
  inheritAttrs: false,
  props: _props.props,

  setup(props) {
    var popupShow = (0, _vue.ref)(false);

    var handleSelect = action => {
      if (action.disabled) {
        return;
      }

      var {
        closeOnClickAction,
        onSelect
      } = props;
      (0, _components.call)(onSelect, action);
      closeOnClickAction && (0, _components.call)(props['onUpdate:show'], false);
    };

    var handlePopupUpdateShow = value => (0, _components.call)(props['onUpdate:show'], value);

    (0, _vue.watch)(() => props.show, newValue => {
      popupShow.value = newValue;
    }, {
      immediate: true
    });
    return {
      n,
      classes,
      handlePopupUpdateShow,
      popupShow,
      pack: _locale.pack,
      dt: _shared.dt,
      handleSelect
    };
  }

});

exports.default = _default;