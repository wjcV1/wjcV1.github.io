"use strict";

exports.__esModule = true;
exports.cancelAnimationFrame = cancelAnimationFrame;
exports.doubleRaf = doubleRaf;
exports.formatStyleVars = formatStyleVars;
exports.getAllParentScroller = getAllParentScroller;
exports.getLeft = getLeft;
exports.getParentScroller = getParentScroller;
exports.getScrollLeft = getScrollLeft;
exports.getScrollTop = getScrollTop;
exports.getTop = getTop;
exports.getTranslate = getTranslate;
exports.inViewport = inViewport;
exports.multiplySizeUnit = exports.isVw = exports.isVh = exports.isRem = exports.isPx = exports.isPercent = void 0;
exports.nextTickFrame = nextTickFrame;
exports.requestAnimationFrame = requestAnimationFrame;
exports.scrollTo = scrollTo;
exports.supportTouch = supportTouch;
exports.toSizeUnit = exports.toPxNum = void 0;

var _shared = require("@varlet/shared");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function getLeft(element) {
  var {
    left
  } = element.getBoundingClientRect();
  return left + (document.body.scrollLeft || document.documentElement.scrollLeft);
}

function getTop(element) {
  var {
    top
  } = element.getBoundingClientRect();
  return top + (document.body.scrollTop || document.documentElement.scrollTop);
}

function getScrollTop(element) {
  var top = 'scrollTop' in element ? element.scrollTop : element.pageYOffset; // iOS scroll bounce cause minus scrollTop

  return Math.max(top, 0);
}

function getScrollLeft(element) {
  var left = 'scrollLeft' in element ? element.scrollLeft : element.pageXOffset;
  return Math.max(left, 0);
}

function inViewport(_x) {
  return _inViewport.apply(this, arguments);
}

function _inViewport() {
  _inViewport = _asyncToGenerator(function* (element) {
    yield doubleRaf();
    var {
      top,
      bottom,
      left,
      right
    } = element.getBoundingClientRect();
    var {
      innerWidth,
      innerHeight
    } = window;
    var xInViewport = left <= innerWidth && right >= 0;
    var yInViewport = top <= innerHeight && bottom >= 0;
    return xInViewport && yInViewport;
  });
  return _inViewport.apply(this, arguments);
}

function getTranslate(el) {
  var {
    transform
  } = window.getComputedStyle(el);
  return +transform.slice(transform.lastIndexOf(',') + 2, transform.length - 1);
}

function getParentScroller(el) {
  var element = el;

  while (element) {
    if (!element.parentNode) {
      break;
    }

    element = element.parentNode;

    if (element === document.body || element === document.documentElement) {
      break;
    }

    var scrollRE = /(scroll|auto)/;
    var {
      overflowY,
      overflow
    } = window.getComputedStyle(element);

    if (scrollRE.test(overflowY) || scrollRE.test(overflow)) {
      return element;
    }
  }

  return window;
}

function getAllParentScroller(el) {
  var allParentScroller = [];
  var element = el;

  while (element !== window) {
    element = getParentScroller(element);
    allParentScroller.push(element);
  }

  return allParentScroller;
} // example 1rem


var isRem = value => (0, _shared.isString)(value) && value.endsWith('rem'); // example 1 || 1px


exports.isRem = isRem;

var isPx = value => (0, _shared.isString)(value) && value.endsWith('px') || (0, _shared.isNumber)(value); // example 1%


exports.isPx = isPx;

var isPercent = value => (0, _shared.isString)(value) && value.endsWith('%'); // example 1vw


exports.isPercent = isPercent;

var isVw = value => (0, _shared.isString)(value) && value.endsWith('vw'); // example 1vh


exports.isVw = isVw;

var isVh = value => (0, _shared.isString)(value) && value.endsWith('vh'); // example return 1


exports.isVh = isVh;

var toPxNum = value => {
  if ((0, _shared.isNumber)(value)) {
    return value;
  }

  if (isPx(value)) {
    return +value.replace('px', '');
  }

  if (isVw(value)) {
    return +value.replace('vw', '') * window.innerWidth / 100;
  }

  if (isVh(value)) {
    return +value.replace('vh', '') * window.innerHeight / 100;
  }

  if (isRem(value)) {
    var num = +value.replace('rem', '');
    var rootFontSize = window.getComputedStyle(document.documentElement).fontSize;
    return num * parseFloat(rootFontSize);
  }

  if ((0, _shared.isString)(value)) {
    return (0, _shared.toNumber)(value);
  } // % and other


  return 0;
}; // example return 1px 1% 1vw 1vh 1rem null


exports.toPxNum = toPxNum;

var toSizeUnit = value => {
  if (value == null) {
    return undefined;
  }

  if (isPercent(value) || isVw(value) || isVh(value) || isRem(value)) {
    return value;
  }

  return toPxNum(value) + "px";
};

exports.toSizeUnit = toSizeUnit;

var multiplySizeUnit = function (value, quantity) {
  if (quantity === void 0) {
    quantity = 1;
  }

  if (value == null) {
    return undefined;
  }

  var legalSize = toSizeUnit(value);
  var unit = legalSize.match(/(vh|%|rem|px|vw)$/)[0];
  return "" + parseFloat(legalSize) * quantity + unit;
};

exports.multiplySizeUnit = multiplySizeUnit;

function requestAnimationFrame(fn) {
  return globalThis.requestAnimationFrame ? globalThis.requestAnimationFrame(fn) : globalThis.setTimeout(fn, 16);
}

function cancelAnimationFrame(handle) {
  globalThis.cancelAnimationFrame ? globalThis.cancelAnimationFrame(handle) : globalThis.clearTimeout(handle);
}

function nextTickFrame(fn) {
  requestAnimationFrame(() => {
    requestAnimationFrame(fn);
  });
}

function doubleRaf() {
  return new Promise(resolve => {
    requestAnimationFrame(() => {
      requestAnimationFrame(resolve);
    });
  });
}

function scrollTo(element, _ref) {
  var {
    top = 0,
    left = 0,
    duration = 300,
    animation
  } = _ref;
  var startTime = Date.now();
  var scrollTop = getScrollTop(element);
  var scrollLeft = getScrollLeft(element);
  return new Promise(resolve => {
    var frame = () => {
      var progress = (Date.now() - startTime) / duration;

      if (progress < 1) {
        var nextTop = scrollTop + (top - scrollTop) * animation(progress);
        var nextLeft = scrollLeft + (left - scrollLeft) * animation(progress);
        element.scrollTo(nextLeft, nextTop);
        requestAnimationFrame(frame);
      } else {
        element.scrollTo(left, top);
        resolve();
      }
    };

    requestAnimationFrame(frame);
  });
}

function formatStyleVars(styleVars) {
  return Object.entries(styleVars != null ? styleVars : {}).reduce((styles, _ref2) => {
    var [key, value] = _ref2;
    var cssVar = key.startsWith('--') ? key : "--" + (0, _shared.kebabCase)(key);
    styles[cssVar] = value;
    return styles;
  }, {});
}

function supportTouch() {
  var inBrowser = typeof window !== 'undefined';
  return inBrowser && 'ontouchstart' in window;
}