"use strict";

exports.__esModule = true;
exports.addRouteListener = addRouteListener;
exports.call = call;
exports.createNamespace = createNamespace;
exports.exposeApis = exposeApis;
exports.flatVNodes = flatVNodes;
exports.keyInProvides = keyInProvides;
exports.mount = mount;
exports.mountInstance = mountInstance;
exports.pickProps = pickProps;
exports.useAtChildrenCounter = useAtChildrenCounter;
exports.useAtParentIndex = useAtParentIndex;
exports.useChildren = useChildren;
exports.useParent = useParent;
exports.useTeleport = useTeleport;
exports.useValidation = useValidation;

var _vue = require("vue");

var _shared = require("@varlet/shared");

var _excluded = ["collect", "clear"];

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function pickProps(props, propsKey) {
  return Array.isArray(propsKey) ? propsKey.reduce((pickedProps, key) => {
    pickedProps[key] = props[key];
    return pickedProps;
  }, {}) : props[propsKey];
}

function mount(component) {
  var app = (0, _vue.createApp)(component);
  var host = document.createElement('div');
  document.body.appendChild(host);
  return {
    instance: app.mount(host),

    unmount() {
      app.unmount();
      document.body.removeChild(host);
    }

  };
}

function mountInstance(component, props, eventListener) {
  if (props === void 0) {
    props = {};
  }

  if (eventListener === void 0) {
    eventListener = {};
  }

  var Host = {
    setup() {
      return () => (0, _vue.h)(component, _extends({}, props, eventListener));
    }

  };
  var {
    unmount
  } = mount(Host);
  return {
    unmountInstance: unmount
  };
}

function flatVNodes(subTree) {
  var vNodes = [];

  var flat = subTree => {
    if (subTree != null && subTree.component) {
      flat(subTree == null ? void 0 : subTree.component.subTree);
      return;
    }

    if (Array.isArray(subTree == null ? void 0 : subTree.children)) {
      subTree.children.forEach(child => {
        if ((0, _vue.isVNode)(child)) {
          vNodes.push(child);
          flat(child);
        }
      });
    }
  };

  flat(subTree);
  return vNodes;
}

function useAtChildrenCounter(key) {
  var instances = (0, _vue.reactive)([]);
  var parentInstance = (0, _vue.getCurrentInstance)();

  var sortInstances = () => {
    var vNodes = flatVNodes(parentInstance.subTree);
    instances.sort((a, b) => {
      return vNodes.indexOf(a.vnode) - vNodes.indexOf(b.vnode);
    });
  };

  var collect = instance => {
    instances.push(instance);
    sortInstances();
  };

  var clear = instance => {
    (0, _shared.removeItem)(instances, instance);
  };

  (0, _vue.provide)(key, {
    collect,
    clear,
    instances
  });
  var length = (0, _vue.computed)(() => instances.length);
  return {
    length
  };
}

function useAtParentIndex(key) {
  if (!keyInProvides(key)) {
    return {
      index: null
    };
  }

  var childrenCounter = (0, _vue.inject)(key);
  var {
    collect,
    clear,
    instances
  } = childrenCounter;
  var instance = (0, _vue.getCurrentInstance)();
  (0, _vue.onMounted)(() => {
    (0, _vue.nextTick)().then(() => collect(instance));
  });
  (0, _vue.onUnmounted)(() => {
    (0, _vue.nextTick)().then(() => clear(instance));
  });
  var index = (0, _vue.computed)(() => instances.indexOf(instance));
  return {
    index
  };
}

function useChildren(key) {
  var childProviders = [];

  var collect = childProvider => {
    childProviders.push(childProvider);
  };

  var clear = childProvider => {
    (0, _shared.removeItem)(childProviders, childProvider);
  };

  var bindChildren = parentProvider => {
    (0, _vue.provide)(key, _extends({
      collect,
      clear
    }, parentProvider));
  };

  return {
    childProviders,
    bindChildren
  };
}

function useParent(key) {
  if (!keyInProvides(key)) {
    return {
      parentProvider: null,
      bindParent: null
    };
  }

  var rawParentProvider = (0, _vue.inject)(key);

  var {
    collect,
    clear
  } = rawParentProvider,
      parentProvider = _objectWithoutPropertiesLoose(rawParentProvider, _excluded);

  var bindParent = childProvider => {
    (0, _vue.onMounted)(() => collect(childProvider));
    (0, _vue.onBeforeUnmount)(() => clear(childProvider));
  };

  return {
    parentProvider,
    bindParent
  };
}

function keyInProvides(key) {
  var instance = (0, _vue.getCurrentInstance)();
  return key in instance.provides;
}

function useValidation() {
  var errorMessage = (0, _vue.ref)('');

  var validate = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (rules, value, apis) {
      if (!(0, _shared.isArray)(rules) || !rules.length) {
        return true;
      }

      var resArr = yield Promise.all(rules.map(rule => rule(value, apis)));
      return !resArr.some(res => {
        if (res !== true) {
          errorMessage.value = String(res);
          return true;
        }

        return false;
      });
    });

    return function validate(_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();

  var resetValidation = () => {
    errorMessage.value = '';
  };

  var validateWithTrigger = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(function* (validateTrigger, trigger, rules, value, apis) {
      if (validateTrigger.includes(trigger)) {
        ;
        (yield validate(rules, value, apis)) && (errorMessage.value = '');
      }
    });

    return function validateWithTrigger(_x4, _x5, _x6, _x7, _x8) {
      return _ref2.apply(this, arguments);
    };
  }();

  return {
    errorMessage,
    validate,
    resetValidation,
    validateWithTrigger
  };
}

function addRouteListener(cb) {
  (0, _vue.onMounted)(() => {
    window.addEventListener('hashchange', cb);
    window.addEventListener('popstate', cb);
  });
  (0, _vue.onUnmounted)(() => {
    window.removeEventListener('hashchange', cb);
    window.removeEventListener('popstate', cb);
  });
}

function useTeleport() {
  var disabled = (0, _vue.ref)(false);
  (0, _vue.onActivated)(() => {
    disabled.value = false;
  });
  (0, _vue.onDeactivated)(() => {
    disabled.value = true;
  });
  return {
    disabled
  };
}

function exposeApis(apis) {
  var instance = (0, _vue.getCurrentInstance)();

  if (instance) {
    Object.assign(instance.proxy, apis);
  }
}

function createNamespace(name) {
  var namespace = "var-" + name;

  var createBEM = suffix => {
    if (!suffix) return namespace;
    return suffix.startsWith('--') ? "" + namespace + suffix : namespace + "__" + suffix;
  };

  var classes = function () {
    for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {
      classes[_key] = arguments[_key];
    }

    return classes.map(className => {
      if ((0, _shared.isArray)(className)) {
        var [condition, truthy, falsy = null] = className;
        return condition ? truthy : falsy;
      }

      return className;
    });
  };

  return {
    n: createBEM,
    classes
  };
}

function call(fn) {
  for (var _len2 = arguments.length, arg = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    arg[_key2 - 1] = arguments[_key2];
  }

  if (fn) return fn(...arg);
}