"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _sticky = _interopRequireDefault(require("../sticky"));

var _vue = require("vue");

var _provide = require("./provide");

var _props = require("./props");

var _components = require("../utils/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('index-anchor');

function render(_ctx, _cache) {
  return (0, _vue.openBlock)(), (0, _vue.createBlock)((0, _vue.resolveDynamicComponent)(_ctx.sticky ? 'var-sticky' : _ctx.Transition), {
    "offset-top": _ctx.sticky ? _ctx.stickyOffsetTop : null,
    "z-index": _ctx.sticky ? _ctx.zIndex : null,
    disabled: _ctx.disabled && !_ctx.cssMode,
    "css-mode": _ctx.cssMode,
    ref: "anchorEl"
  }, {
    default: (0, _vue.withCtx)(() => [(0, _vue.createElementVNode)("div", (0, _vue.mergeProps)({
      class: _ctx.n()
    }, _ctx.$attrs), [(0, _vue.renderSlot)(_ctx.$slots, "default", {}, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.name), 1
    /* TEXT */
    )])], 16
    /* FULL_PROPS */
    )]),
    _: 3
    /* FORWARDED */

  }, 8
  /* PROPS */
  , ["offset-top", "z-index", "disabled", "css-mode"]);
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarIndexAnchor',
  components: {
    VarSticky: _sticky.default
  },
  inheritAttrs: false,
  props: _props.props,

  setup(props) {
    var {
      index,
      indexBar,
      bindIndexBar
    } = (0, _provide.useIndexBar)();
    var ownTop = (0, _vue.ref)(0);
    var disabled = (0, _vue.ref)(false);
    var name = (0, _vue.computed)(() => props.index);
    var anchorEl = (0, _vue.ref)(null);
    var {
      active,
      sticky,
      cssMode,
      stickyOffsetTop,
      zIndex
    } = indexBar;

    var setOwnTop = () => {
      if (!anchorEl.value) return;
      ownTop.value = anchorEl.value.$el ? anchorEl.value.$el.offsetTop : anchorEl.value.offsetTop;
    };

    var setDisabled = value => {
      disabled.value = value;
    };

    var indexAnchorProvider = {
      index,
      name,
      ownTop,
      setOwnTop,
      setDisabled
    };
    bindIndexBar(indexAnchorProvider);
    return {
      n,
      classes,
      name,
      anchorEl,
      active,
      sticky,
      zIndex,
      disabled,
      cssMode,
      stickyOffsetTop,
      Transition: _vue.Transition
    };
  }

});

exports.default = _default;