"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _icon = _interopRequireDefault(require("../icon"));

var _shared = require("@varlet/shared");

var _vue = require("vue");

var _props = require("./props");

var _components = require("../utils/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('badge');

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = {
  key: 1
};

function render(_ctx, _cache) {
  var _component_var_icon = (0, _vue.resolveComponent)("var-icon");

  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n(), 'var--box'))
  }, [(0, _vue.createVNode)(_vue.Transition, {
    name: "var-badge-fade"
  }, {
    default: (0, _vue.withCtx)(() => [(0, _vue.withDirectives)((0, _vue.createElementVNode)("span", (0, _vue.mergeProps)(_ctx.$attrs, {
      class: _ctx.classes(_ctx.n('content'), ..._ctx.contentClass),
      style: {
        background: _ctx.color
      }
    }), [_ctx.icon && !_ctx.dot ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_icon, {
      key: 0,
      name: _ctx.icon,
      size: "10px"
    }, null, 8
    /* PROPS */
    , ["name"])) : ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("span", _hoisted_1, (0, _vue.toDisplayString)(_ctx.values), 1
    /* TEXT */
    ))], 16
    /* FULL_PROPS */
    ), [[_vue.vShow, !_ctx.hidden]])]),
    _: 1
    /* STABLE */

  }), (0, _vue.renderSlot)(_ctx.$slots, "default")], 2
  /* CLASS */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarBadge',
  components: {
    VarIcon: _icon.default
  },
  inheritAttrs: false,
  props: _props.props,

  setup(props, _ref) {
    var {
      slots
    } = _ref;
    var contentClass = (0, _vue.computed)(() => {
      var {
        type,
        position,
        dot,
        icon
      } = props;
      var positionBasic = slots.default && n('position') + " " + n("--" + position);
      var dotClass = dot ? n('dot') : null;
      var positionClass = getPositionClass();
      var iconClass = icon ? n('icon') : null;
      return [n("--" + type), positionBasic, dotClass, positionClass, iconClass];
    });
    var values = (0, _vue.computed)(() => {
      var {
        dot,
        value,
        maxValue
      } = props;
      if (dot) return '';
      if (value !== undefined && maxValue !== undefined && (0, _shared.toNumber)(value) > maxValue) return maxValue + "+";
      return value;
    });

    var getPositionClass = () => {
      var {
        position,
        dot
      } = props;
      if (dot && position.includes('right')) return n('dot--right');
      if (dot && position.includes('left')) return n('dot--left');
    };

    return {
      n,
      classes,
      values,
      contentClass
    };
  }

});

exports.default = _default;