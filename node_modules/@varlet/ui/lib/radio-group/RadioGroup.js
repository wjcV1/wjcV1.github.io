"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _formDetails = _interopRequireDefault(require("../form-details"));

var _vue = require("vue");

var _props = require("./props");

var _components = require("../utils/components");

var _provide = require("./provide");

var _provide2 = require("../form/provide");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('radio-group');

function render(_ctx, _cache) {
  var _component_var_form_details = (0, _vue.resolveComponent)("var-form-details");

  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.n('wrap'))
  }, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n(), _ctx.n("--" + _ctx.direction)))
  }, [(0, _vue.renderSlot)(_ctx.$slots, "default")], 2
  /* CLASS */
  ), (0, _vue.createVNode)(_component_var_form_details, {
    "error-message": _ctx.errorMessage
  }, null, 8
  /* PROPS */
  , ["error-message"])], 2
  /* CLASS */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarRadioGroup',
  components: {
    VarFormDetails: _formDetails.default
  },
  props: _props.props,

  setup(props) {
    var {
      length,
      radios,
      bindRadios
    } = (0, _provide.useRadios)();
    var {
      bindForm
    } = (0, _provide2.useForm)();
    var {
      errorMessage,
      validateWithTrigger: vt,
      validate: v,
      // expose
      resetValidation
    } = (0, _components.useValidation)();
    var radioGroupErrorMessage = (0, _vue.computed)(() => errorMessage.value);

    var validateWithTrigger = trigger => {
      (0, _vue.nextTick)(() => {
        var {
          validateTrigger,
          rules,
          modelValue
        } = props;
        vt(validateTrigger, trigger, rules, modelValue);
      });
    };

    var syncRadios = () => radios.forEach(_ref => {
      var {
        sync
      } = _ref;
      return sync(props.modelValue);
    });

    var onToggle = changedValue => {
      (0, _components.call)(props['onUpdate:modelValue'], changedValue);
      (0, _components.call)(props.onChange, changedValue);
      validateWithTrigger('onChange');
    }; // expose


    var validate = () => v(props.rules, props.modelValue); // expose


    var reset = () => {
      (0, _components.call)(props['onUpdate:modelValue'], undefined);
      resetValidation();
    };

    (0, _vue.watch)(() => props.modelValue, syncRadios);
    (0, _vue.watch)(() => length.value, syncRadios);
    var radioGroupProvider = {
      onToggle,
      validate,
      reset,
      resetValidation,
      errorMessage: radioGroupErrorMessage
    };
    (0, _components.call)(bindForm, radioGroupProvider);
    bindRadios(radioGroupProvider);
    return {
      errorMessage,
      n,
      classes,
      reset,
      validate,
      resetValidation
    };
  }

});

exports.default = _default;