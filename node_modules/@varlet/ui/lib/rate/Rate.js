"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _icon = _interopRequireDefault(require("../icon"));

var _formDetails = _interopRequireDefault(require("../form-details"));

var _ripple = _interopRequireDefault(require("../ripple"));

var _vue = require("vue");

var _provide = require("../form/provide");

var _components = require("../utils/components");

var _elements = require("../utils/elements");

var _shared = require("@varlet/shared");

var _props = require("./props");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n
} = (0, _components.createNamespace)('rate');

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = ["onClick"];

function render(_ctx, _cache) {
  var _component_var_icon = (0, _vue.resolveComponent)("var-icon");

  var _component_var_form_details = (0, _vue.resolveComponent)("var-form-details");

  var _directive_ripple = (0, _vue.resolveDirective)("ripple");

  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.n('wrap'))
  }, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.n())
  }, [((0, _vue.openBlock)(true), (0, _vue.createElementBlock)(_vue.Fragment, null, (0, _vue.renderList)(_ctx.toNumber(_ctx.count), val => {
    return (0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
      key: val,
      style: (0, _vue.normalizeStyle)(_ctx.getStyle(val)),
      class: (0, _vue.normalizeClass)(_ctx.getClass(val)),
      onClick: $event => _ctx.handleClick(val, $event)
    }, [(0, _vue.createVNode)(_component_var_icon, {
      class: (0, _vue.normalizeClass)(_ctx.n('content-icon')),
      "var-rate-cover": "",
      transition: 0,
      namespace: _ctx.namespace,
      name: _ctx.getIconName(val),
      style: (0, _vue.normalizeStyle)({
        fontSize: _ctx.toSizeUnit(_ctx.size)
      })
    }, null, 8
    /* PROPS */
    , ["class", "namespace", "name", "style"])], 14
    /* CLASS, STYLE, PROPS */
    , _hoisted_1)), [[_directive_ripple, {
      disabled: _ctx.formReadonly || _ctx.readonly || _ctx.formDisabled || _ctx.disabled || !_ctx.ripple
    }]]);
  }), 128
  /* KEYED_FRAGMENT */
  ))], 2
  /* CLASS */
  ), (0, _vue.createVNode)(_component_var_form_details, {
    "error-message": _ctx.errorMessage
  }, null, 8
  /* PROPS */
  , ["error-message"])], 2
  /* CLASS */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarRate',
  components: {
    VarIcon: _icon.default,
    VarFormDetails: _formDetails.default
  },
  directives: {
    Ripple: _ripple.default
  },
  props: _props.props,

  setup(props) {
    var {
      form,
      bindForm
    } = (0, _provide.useForm)();
    var {
      errorMessage,
      validateWithTrigger: vt,
      validate: v,
      resetValidation
    } = (0, _components.useValidation)();

    var getStyle = val => {
      var {
        count,
        size,
        gap
      } = props;
      return {
        color: transformValue(val).color,
        marginRight: val !== (0, _shared.toNumber)(count) ? (0, _elements.toSizeUnit)(gap) : 0,
        width: (0, _elements.toSizeUnit)(size),
        height: (0, _elements.toSizeUnit)(size),
        borderRadius: '50%'
      };
    };

    var getClass = val => {
      var {
        type,
        color
      } = transformValue(val);
      return {
        [n('content')]: true,
        [n('--disabled')]: (form == null ? void 0 : form.disabled.value) || props.disabled,
        [n('--error')]: errorMessage.value,
        [n('--primary')]: type !== 'empty' && !color
      };
    };

    var getIconName = val => {
      var {
        type
      } = transformValue(val);
      var {
        icon,
        halfIcon,
        emptyIcon
      } = props;
      return type === 'full' ? icon : type === 'half' ? halfIcon : emptyIcon;
    };

    var transformValue = index => {
      var {
        modelValue,
        disabled,
        disabledColor,
        color,
        half,
        emptyColor
      } = props;
      var iconColor;
      if (disabled || form != null && form.disabled.value) iconColor = disabledColor;else if (color) iconColor = color;

      if (index <= (0, _shared.toNumber)(modelValue)) {
        return {
          type: 'full',
          score: index,
          color: iconColor
        };
      }

      if (half && index <= (0, _shared.toNumber)(modelValue) + 0.5) {
        return {
          type: 'half',
          score: index,
          color: iconColor
        };
      }

      return {
        type: 'empty',
        score: index,
        color: disabled || form != null && form.disabled.value ? disabledColor : emptyColor
      };
    };

    var changeValue = (score, event) => {
      if (props.half) {
        var {
          offsetWidth
        } = event.target;
        if (event.offsetX <= Math.floor(offsetWidth / 2)) score -= 0.5;
      }

      (0, _components.call)(props['onUpdate:modelValue'], score);
    };

    var validate = () => v(props.rules, (0, _shared.toNumber)(props.modelValue));

    var validateWithTrigger = () => (0, _vue.nextTick)(() => vt(['onChange'], 'onChange', props.rules, props.modelValue));

    var handleClick = (score, event) => {
      var {
        readonly,
        disabled,
        onChange
      } = props;

      if (readonly || disabled || form != null && form.disabled.value || form != null && form.readonly.value) {
        return;
      }

      changeValue(score, event);
      (0, _components.call)(onChange, score);
      validateWithTrigger();
    };

    var reset = () => {
      (0, _components.call)(props['onUpdate:modelValue'], 0);
      resetValidation();
    };

    var rateProvider = {
      reset,
      validate,
      resetValidation
    };
    (0, _components.call)(bindForm, rateProvider);
    return {
      errorMessage,
      formDisabled: form == null ? void 0 : form.disabled,
      formReadonly: form == null ? void 0 : form.readonly,
      getStyle,
      getClass,
      getIconName,
      handleClick,
      reset,
      validate,
      resetValidation,
      toSizeUnit: _elements.toSizeUnit,
      toNumber: _shared.toNumber,
      n
    };
  }

});

exports.default = _default;