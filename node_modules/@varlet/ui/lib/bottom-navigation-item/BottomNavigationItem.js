"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _ripple = _interopRequireDefault(require("../ripple"));

var _badge = _interopRequireDefault(require("../badge"));

var _icon = _interopRequireDefault(require("../icon"));

var _vue = require("vue");

var _props = require("./props");

var _provide = require("./provide");

var _components = require("../utils/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('bottom-navigation-item');
var defaultBadgeProps = {
  type: 'danger',
  dot: true
};

function render(_ctx, _cache) {
  var _component_var_icon = (0, _vue.resolveComponent)("var-icon");

  var _component_var_badge = (0, _vue.resolveComponent)("var-badge");

  var _directive_ripple = (0, _vue.resolveDirective)("ripple");

  return (0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createElementBlock)("button", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n(), [_ctx.active === _ctx.index || _ctx.active === _ctx.name, _ctx.n('--active')])),
    style: (0, _vue.normalizeStyle)({
      color: _ctx.computeColorStyle()
    }),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.handleClick && _ctx.handleClick(...arguments);
    })
  }, [_ctx.icon && !_ctx.$slots.icon ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_icon, {
    key: 0,
    name: _ctx.icon,
    namespace: _ctx.namespace,
    class: (0, _vue.normalizeClass)(_ctx.n('icon')),
    "var-bottom-navigation-item-cover": ""
  }, null, 8
  /* PROPS */
  , ["name", "namespace", "class"])) : (0, _vue.createCommentVNode)("v-if", true), (0, _vue.renderSlot)(_ctx.$slots, "icon", {
    active: _ctx.active === _ctx.index || _ctx.active === _ctx.name
  }), _ctx.badge ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_badge, (0, _vue.mergeProps)({
    key: 1
  }, _ctx.badgeProps, {
    class: _ctx.n('badge'),
    "var-bottom-navigation-item-cover": ""
  }), null, 16
  /* FULL_PROPS */
  , ["class"])) : (0, _vue.createCommentVNode)("v-if", true), (0, _vue.createElementVNode)("span", {
    class: (0, _vue.normalizeClass)(_ctx.n('label'))
  }, [!_ctx.$slots.default ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)(_vue.Fragment, {
    key: 0
  }, [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.label), 1
  /* TEXT */
  )], 2112
  /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
  )) : (0, _vue.createCommentVNode)("v-if", true), (0, _vue.renderSlot)(_ctx.$slots, "default")], 2
  /* CLASS */
  )], 6
  /* CLASS, STYLE */
  )), [[_directive_ripple]]);
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarBottomNavigationItem',
  components: {
    VarBadge: _badge.default,
    VarIcon: _icon.default
  },
  directives: {
    Ripple: _ripple.default
  },
  props: _props.props,

  setup(props) {
    var name = (0, _vue.computed)(() => props.name);
    var badge = (0, _vue.computed)(() => props.badge);
    var badgeProps = (0, _vue.ref)({});
    var {
      index,
      bottomNavigation,
      bindBottomNavigation
    } = (0, _provide.useBottomNavigation)();
    var {
      active,
      activeColor,
      inactiveColor
    } = bottomNavigation;
    var bottomNavigationItemProvider = {
      name,
      index
    };

    var computeColorStyle = () => {
      return active.value === name.value || active.value === index.value ? activeColor.value : inactiveColor.value;
    };

    var handleClick = () => {
      var _name$value;

      var active = (_name$value = name.value) != null ? _name$value : index.value;
      (0, _components.call)(props.onClick, active);
      (0, _components.call)(bottomNavigation.onToggle, active);
    };

    bindBottomNavigation(bottomNavigationItemProvider);
    (0, _vue.watch)(() => badge.value, newValue => {
      badgeProps.value = newValue === true ? defaultBadgeProps : badge.value;
    }, {
      immediate: true
    });
    return {
      n,
      classes,
      index,
      active,
      badge,
      badgeProps,
      computeColorStyle,
      handleClick
    };
  }

});

exports.default = _default;