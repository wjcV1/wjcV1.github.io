"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _vue = require("vue");

var _props = require("./props");

var _shared = require("@varlet/shared");

var _elements = require("../utils/elements");

var _components = require("../utils/components");

var {
  n,
  classes
} = (0, _components.createNamespace)('progress');

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = ["viewBox"];
var _hoisted_2 = ["cx", "cy", "r", "stroke-width"];
var _hoisted_3 = ["cx", "cy", "r", "stroke-width"];

function render(_ctx, _cache) {
  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.n())
  }, [_ctx.mode === 'linear' ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    key: 0,
    class: (0, _vue.normalizeClass)(_ctx.n('linear'))
  }, [(0, _vue.createElementVNode)("div", (0, _vue.mergeProps)({
    class: _ctx.n('linear-block'),
    style: {
      height: _ctx.toSizeUnit(_ctx.lineWidth)
    }
  }, _ctx.$attrs), [_ctx.track ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    key: 0,
    class: (0, _vue.normalizeClass)(_ctx.n('linear-background')),
    style: (0, _vue.normalizeStyle)({
      background: _ctx.trackColor
    })
  }, null, 6
  /* CLASS, STYLE */
  )) : (0, _vue.createCommentVNode)("v-if", true), (0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('linear-certain'), [_ctx.ripple, _ctx.n('linear-ripple')])),
    style: (0, _vue.normalizeStyle)({
      background: _ctx.color,
      width: _ctx.linearProps.width
    })
  }, null, 6
  /* CLASS, STYLE */
  )], 16
  /* FULL_PROPS */
  ), _ctx.label ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", (0, _vue.mergeProps)({
    key: 0,
    class: _ctx.n('linear-label')
  }, _ctx.$attrs), [(0, _vue.renderSlot)(_ctx.$slots, "default", {}, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.linearProps.roundValue), 1
  /* TEXT */
  )])], 16
  /* FULL_PROPS */
  )) : (0, _vue.createCommentVNode)("v-if", true)], 2
  /* CLASS */
  )) : (0, _vue.createCommentVNode)("v-if", true), _ctx.mode === 'circle' ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    key: 1,
    class: (0, _vue.normalizeClass)(_ctx.n('circle')),
    style: (0, _vue.normalizeStyle)({
      width: _ctx.toSizeUnit(_ctx.size),
      height: _ctx.toSizeUnit(_ctx.size)
    })
  }, [((0, _vue.openBlock)(), (0, _vue.createElementBlock)("svg", {
    class: (0, _vue.normalizeClass)(_ctx.n('circle-svg')),
    style: (0, _vue.normalizeStyle)({
      transform: "rotate(" + (_ctx.rotate - 90) + "deg)"
    }),
    viewBox: _ctx.circleProps.viewBox
  }, [_ctx.track ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("circle", {
    key: 0,
    class: (0, _vue.normalizeClass)(_ctx.n('circle-background')),
    cx: _ctx.multiplySizeUnit(_ctx.size, 0.5),
    cy: _ctx.multiplySizeUnit(_ctx.size, 0.5),
    r: _ctx.circleProps.radius,
    fill: "transparent",
    "stroke-width": _ctx.toSizeUnit(_ctx.lineWidth),
    style: (0, _vue.normalizeStyle)({
      strokeDasharray: _ctx.circleProps.perimeter,
      stroke: _ctx.trackColor
    })
  }, null, 14
  /* CLASS, STYLE, PROPS */
  , _hoisted_2)) : (0, _vue.createCommentVNode)("v-if", true), (0, _vue.createElementVNode)("circle", {
    class: (0, _vue.normalizeClass)(_ctx.n('circle-certain')),
    cx: _ctx.multiplySizeUnit(_ctx.size, 0.5),
    cy: _ctx.multiplySizeUnit(_ctx.size, 0.5),
    r: _ctx.circleProps.radius,
    fill: "transparent",
    "stroke-width": _ctx.toSizeUnit(_ctx.lineWidth),
    style: (0, _vue.normalizeStyle)({
      strokeDasharray: _ctx.circleProps.strokeDasharray,
      stroke: _ctx.color
    })
  }, null, 14
  /* CLASS, STYLE, PROPS */
  , _hoisted_3)], 14
  /* CLASS, STYLE, PROPS */
  , _hoisted_1)), _ctx.label ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", (0, _vue.mergeProps)({
    key: 0,
    class: _ctx.n('circle-label')
  }, _ctx.$attrs), [(0, _vue.renderSlot)(_ctx.$slots, "default", {}, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.circleProps.roundValue), 1
  /* TEXT */
  )])], 16
  /* FULL_PROPS */
  )) : (0, _vue.createCommentVNode)("v-if", true)], 6
  /* CLASS, STYLE */
  )) : (0, _vue.createCommentVNode)("v-if", true)], 2
  /* CLASS */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarProgress',
  inheritAttrs: false,
  props: _props.props,

  setup(props) {
    var linearProps = (0, _vue.computed)(() => {
      var value = (0, _shared.toNumber)(props.value);
      var width = value > 100 ? 100 : value;
      var roundValue = value > 100 ? 100 : Math.round(value);
      return {
        width: width + "%",
        roundValue: roundValue + "%"
      };
    });
    var circleProps = (0, _vue.computed)(() => {
      var {
        size,
        lineWidth,
        value
      } = props;
      var viewBox = "0 0 " + (0, _elements.toPxNum)(size) + " " + (0, _elements.toPxNum)(size);
      var roundValue = (0, _shared.toNumber)(value) > 100 ? 100 : Math.round((0, _shared.toNumber)(value));
      var radius = ((0, _elements.toPxNum)(size) - (0, _elements.toPxNum)(lineWidth)) / 2;
      var perimeter = 2 * Math.PI * radius;
      var strokeDasharray = roundValue / 100 * perimeter + ", " + perimeter;
      return {
        viewBox,
        radius,
        strokeDasharray,
        perimeter,
        roundValue: roundValue + "%"
      };
    });
    return {
      n,
      classes,
      toSizeUnit: _elements.toSizeUnit,
      multiplySizeUnit: _elements.multiplySizeUnit,
      linearProps,
      circleProps
    };
  }

});

exports.default = _default;