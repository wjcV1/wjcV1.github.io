"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _icon = _interopRequireDefault(require("../icon"));

var _formDetails = _interopRequireDefault(require("../form-details"));

var _ripple = _interopRequireDefault(require("../ripple"));

var _vue = require("vue");

var _props = require("./props");

var _components = require("../utils/components");

var _provide = require("./provide");

var _provide2 = require("../form/provide");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('checkbox');

function render(_ctx, _cache) {
  var _component_var_icon = (0, _vue.resolveComponent)("var-icon");

  var _component_var_form_details = (0, _vue.resolveComponent)("var-form-details");

  var _directive_ripple = (0, _vue.resolveDirective)("ripple");

  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.n('wrap')),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.handleClick && _ctx.handleClick(...arguments);
    })
  }, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.n())
  }, [(0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('action'), [_ctx.checked, _ctx.n('--checked'), _ctx.n('--unchecked')], [_ctx.errorMessage || _ctx.checkboxGroupErrorMessage, _ctx.n('--error')], [_ctx.formDisabled || _ctx.disabled, _ctx.n('--disabled')])),
    style: (0, _vue.normalizeStyle)({
      color: _ctx.checked ? _ctx.checkedColor : _ctx.uncheckedColor
    })
  }, [_ctx.checked ? (0, _vue.renderSlot)(_ctx.$slots, "checked-icon", {
    key: 0
  }, () => [(0, _vue.createVNode)(_component_var_icon, {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('icon'), [_ctx.withAnimation, _ctx.n('--with-animation')])),
    name: "checkbox-marked",
    size: _ctx.iconSize,
    "var-checkbox-cover": ""
  }, null, 8
  /* PROPS */
  , ["class", "size"])]) : (0, _vue.renderSlot)(_ctx.$slots, "unchecked-icon", {
    key: 1
  }, () => [(0, _vue.createVNode)(_component_var_icon, {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('icon'), [_ctx.withAnimation, _ctx.n('--with-animation')])),
    name: "checkbox-blank-outline",
    size: _ctx.iconSize,
    "var-checkbox-cover": ""
  }, null, 8
  /* PROPS */
  , ["class", "size"])])], 6
  /* CLASS, STYLE */
  )), [[_directive_ripple, {
    disabled: _ctx.formReadonly || _ctx.readonly || _ctx.formDisabled || _ctx.disabled || !_ctx.ripple
  }]]), (0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('text'), [_ctx.errorMessage || _ctx.checkboxGroupErrorMessage, _ctx.n('--error')], [_ctx.formDisabled || _ctx.disabled, _ctx.n('--disabled')]))
  }, [(0, _vue.renderSlot)(_ctx.$slots, "default")], 2
  /* CLASS */
  )], 2
  /* CLASS */
  ), (0, _vue.createVNode)(_component_var_form_details, {
    "error-message": _ctx.errorMessage
  }, null, 8
  /* PROPS */
  , ["error-message"])], 2
  /* CLASS */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarCheckbox',
  directives: {
    Ripple: _ripple.default
  },
  components: {
    VarIcon: _icon.default,
    VarFormDetails: _formDetails.default
  },
  props: _props.props,

  setup(props) {
    var value = (0, _vue.ref)(false);
    var checked = (0, _vue.computed)(() => value.value === props.checkedValue);
    var checkedValue = (0, _vue.computed)(() => props.checkedValue);
    var withAnimation = (0, _vue.ref)(false);
    var {
      checkboxGroup,
      bindCheckboxGroup
    } = (0, _provide.useCheckboxGroup)();
    var {
      form,
      bindForm
    } = (0, _provide2.useForm)();
    var {
      errorMessage,
      validateWithTrigger: vt,
      validate: v,
      // expose
      resetValidation
    } = (0, _components.useValidation)();

    var validateWithTrigger = trigger => {
      (0, _vue.nextTick)(() => {
        var {
          validateTrigger,
          rules,
          modelValue
        } = props;
        vt(validateTrigger, trigger, rules, modelValue);
      });
    };

    var change = changedValue => {
      value.value = changedValue;
      var {
        checkedValue,
        onChange
      } = props;
      (0, _components.call)(props['onUpdate:modelValue'], value.value);
      (0, _components.call)(onChange, value.value);
      validateWithTrigger('onChange');
      changedValue === checkedValue ? checkboxGroup == null ? void 0 : checkboxGroup.onChecked(checkedValue) : checkboxGroup == null ? void 0 : checkboxGroup.onUnchecked(checkedValue);
    };

    var handleClick = e => {
      var {
        disabled,
        readonly,
        checkedValue,
        uncheckedValue,
        onClick
      } = props;

      if (form != null && form.disabled.value || disabled) {
        return;
      }

      (0, _components.call)(onClick, e);

      if (form != null && form.readonly.value || readonly) {
        return;
      }

      withAnimation.value = true;
      var maximum = checkboxGroup ? checkboxGroup.checkedCount.value >= Number(checkboxGroup.max.value) : false;

      if (!checked.value && maximum) {
        return;
      }

      change(checked.value ? uncheckedValue : checkedValue);
    };

    var sync = values => {
      var {
        checkedValue,
        uncheckedValue
      } = props;
      value.value = values.includes(checkedValue) ? checkedValue : uncheckedValue;
    };

    var resetWithAnimation = () => {
      withAnimation.value = false;
    }; // expose


    var reset = () => {
      (0, _components.call)(props['onUpdate:modelValue'], props.uncheckedValue);
      resetValidation();
    }; // expose


    var toggle = changedValue => {
      var {
        checkedValue,
        uncheckedValue
      } = props;
      var shouldReverse = ![checkedValue, uncheckedValue].includes(changedValue);

      if (shouldReverse) {
        changedValue = checked.value ? uncheckedValue : checkedValue;
      }

      change(changedValue);
    }; // expose


    var validate = () => v(props.rules, props.modelValue);

    (0, _vue.watch)(() => props.modelValue, newValue => {
      value.value = newValue;
    }, {
      immediate: true
    });
    var checkboxProvider = {
      checkedValue,
      checked,
      sync,
      validate,
      resetValidation,
      reset,
      resetWithAnimation
    };
    (0, _components.call)(bindCheckboxGroup, checkboxProvider);
    (0, _components.call)(bindForm, checkboxProvider);
    return {
      withAnimation,
      checked,
      errorMessage,
      checkboxGroupErrorMessage: checkboxGroup == null ? void 0 : checkboxGroup.errorMessage,
      formDisabled: form == null ? void 0 : form.disabled,
      formReadonly: form == null ? void 0 : form.readonly,
      n,
      classes,
      handleClick,
      toggle,
      reset,
      validate,
      resetValidation
    };
  }

});

exports.default = _default;