import VarImagePreview from './ImagePreview.js'
import { nextTick, reactive } from 'vue';
import { inBrowser, isArray, isString } from '@varlet/shared';
import { mountInstance } from '../utils/components';
var singletonOptions;

function ImagePreview(options) {
  if (!inBrowser()) {
    return;
  }

  ImagePreview.close();
  var imagePreviewOptions = isString(options) ? {
    images: [options]
  } : isArray(options) ? {
    images: options
  } : options;
  var reactiveImagePreviewOptions = reactive(imagePreviewOptions);
  reactiveImagePreviewOptions.teleport = 'body';
  singletonOptions = reactiveImagePreviewOptions;
  var {
    unmountInstance
  } = mountInstance(VarImagePreview, reactiveImagePreviewOptions, {
    onClose: () => reactiveImagePreviewOptions.onClose == null ? void 0 : reactiveImagePreviewOptions.onClose(),
    onClosed: () => {
      reactiveImagePreviewOptions.onClosed == null ? void 0 : reactiveImagePreviewOptions.onClosed();
      unmountInstance();
      singletonOptions === reactiveImagePreviewOptions && (singletonOptions = null);
    },
    onRouteChange: () => {
      unmountInstance();
      singletonOptions === reactiveImagePreviewOptions && (singletonOptions = null);
    },
    'onUpdate:show': value => {
      reactiveImagePreviewOptions.show = value;
    }
  });
  reactiveImagePreviewOptions.show = true;
}

ImagePreview.close = () => {
  if (singletonOptions != null) {
    var prevSingletonOptions = singletonOptions;
    singletonOptions = null;
    nextTick().then(() => {
      prevSingletonOptions.show = false;
    });
  }
};

VarImagePreview.install = function (app) {
  app.component(VarImagePreview.name, VarImagePreview);
};

ImagePreview.install = function (app) {
  app.component(VarImagePreview.name, VarImagePreview);
};

ImagePreview.Component = VarImagePreview;
export var _ImagePreviewComponent = VarImagePreview;
export default ImagePreview;