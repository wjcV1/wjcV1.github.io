import VarIcon from '../icon';
import { toNumber } from '@varlet/shared';
import { computed, defineComponent } from 'vue';
import { props } from './props';
import { createNamespace } from '../utils/components';
var {
  n,
  classes
} = createNamespace('badge');
import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, toDisplayString as _toDisplayString, createElementBlock as _createElementBlock, vShow as _vShow, mergeProps as _mergeProps, createElementVNode as _createElementVNode, withDirectives as _withDirectives, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode, renderSlot as _renderSlot, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  key: 1
};
export function render(_ctx, _cache) {
  var _component_var_icon = _resolveComponent("var-icon");

  return _openBlock(), _createElementBlock("div", {
    class: _normalizeClass(_ctx.classes(_ctx.n(), 'var--box'))
  }, [_createVNode(_Transition, {
    name: "var-badge-fade"
  }, {
    default: _withCtx(() => [_withDirectives(_createElementVNode("span", _mergeProps(_ctx.$attrs, {
      class: _ctx.classes(_ctx.n('content'), ..._ctx.contentClass),
      style: {
        background: _ctx.color
      }
    }), [_ctx.icon && !_ctx.dot ? (_openBlock(), _createBlock(_component_var_icon, {
      key: 0,
      name: _ctx.icon,
      size: "10px"
    }, null, 8
    /* PROPS */
    , ["name"])) : (_openBlock(), _createElementBlock("span", _hoisted_1, _toDisplayString(_ctx.values), 1
    /* TEXT */
    ))], 16
    /* FULL_PROPS */
    ), [[_vShow, !_ctx.hidden]])]),
    _: 1
    /* STABLE */

  }), _renderSlot(_ctx.$slots, "default")], 2
  /* CLASS */
  );
}
export default defineComponent({
  render,
  name: 'VarBadge',
  components: {
    VarIcon
  },
  inheritAttrs: false,
  props,

  setup(props, _ref) {
    var {
      slots
    } = _ref;
    var contentClass = computed(() => {
      var {
        type,
        position,
        dot,
        icon
      } = props;
      var positionBasic = slots.default && n('position') + " " + n("--" + position);
      var dotClass = dot ? n('dot') : null;
      var positionClass = getPositionClass();
      var iconClass = icon ? n('icon') : null;
      return [n("--" + type), positionBasic, dotClass, positionClass, iconClass];
    });
    var values = computed(() => {
      var {
        dot,
        value,
        maxValue
      } = props;
      if (dot) return '';
      if (value !== undefined && maxValue !== undefined && toNumber(value) > maxValue) return maxValue + "+";
      return value;
    });

    var getPositionClass = () => {
      var {
        position,
        dot
      } = props;
      if (dot && position.includes('right')) return n('dot--right');
      if (dot && position.includes('left')) return n('dot--left');
    };

    return {
      n,
      classes,
      values,
      contentClass
    };
  }

});