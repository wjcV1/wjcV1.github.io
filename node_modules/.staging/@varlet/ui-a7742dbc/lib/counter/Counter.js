"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _icon = _interopRequireDefault(require("../icon"));

var _formDetails = _interopRequireDefault(require("../form-details"));

var _ripple = _interopRequireDefault(require("../ripple"));

var _vue = require("vue");

var _decimal = require("decimal.js");

var _props = require("./props");

var _shared = require("@varlet/shared");

var _elements = require("../utils/elements");

var _provide = require("../form/provide");

var _components = require("../utils/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('counter');
var SPEED = 100;
var DELAY = 600;

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = ["inputmode", "readonly", "disabled"];

function render(_ctx, _cache) {
  var _component_var_icon = (0, _vue.resolveComponent)("var-icon");

  var _component_var_form_details = (0, _vue.resolveComponent)("var-form-details");

  var _directive_ripple = (0, _vue.resolveDirective)("ripple");

  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n(), 'var--box'))
  }, [(0, _vue.createElementVNode)("div", (0, _vue.mergeProps)({
    class: _ctx.classes(_ctx.n('controller'), 'var-elevation--2', [_ctx.disabled || _ctx.formDisabled, _ctx.n('--disabled')], [_ctx.errorMessage, _ctx.n('--error')]),
    style: {
      background: _ctx.color ? _ctx.color : undefined
    }
  }, _ctx.$attrs), [(0, _vue.withDirectives)((0, _vue.createVNode)(_component_var_icon, {
    "var-counter-cover": "",
    name: "minus",
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('decrement-button'), [!_ctx.decrementButton, _ctx.n('--hidden')])),
    style: (0, _vue.normalizeStyle)({
      width: _ctx.toSizeUnit(_ctx.buttonSize),
      height: _ctx.toSizeUnit(_ctx.buttonSize)
    }),
    onClick: _ctx.decrement,
    onTouchstart: _ctx.pressDecrement,
    onTouchend: _ctx.releaseDecrement,
    onTouchcancel: _ctx.releaseDecrement
  }, null, 8
  /* PROPS */
  , ["class", "style", "onClick", "onTouchstart", "onTouchend", "onTouchcancel"]), [[_directive_ripple, {
    disabled: !_ctx.ripple || _ctx.disabled || _ctx.readonly || _ctx.disableDecrement || !_ctx.decrementButton || _ctx.isMin
  }]]), (0, _vue.withDirectives)((0, _vue.createElementVNode)("input", {
    class: (0, _vue.normalizeClass)(_ctx.n('input')),
    style: (0, _vue.normalizeStyle)({
      width: _ctx.toSizeUnit(_ctx.inputWidth),
      fontSize: _ctx.toSizeUnit(_ctx.inputTextSize)
    }),
    inputmode: _ctx.toNumber(_ctx.decimalLength) === 0 ? 'numeric' : 'decimal',
    readonly: _ctx.readonly || _ctx.formReadonly,
    disabled: _ctx.disabled || _ctx.formDisabled || _ctx.disableInput,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => _ctx.inputValue = $event),
    onChange: _cache[1] || (_cache[1] = function () {
      return _ctx.handleChange && _ctx.handleChange(...arguments);
    })
  }, null, 46
  /* CLASS, STYLE, PROPS, HYDRATE_EVENTS */
  , _hoisted_1), [[_vue.vModelText, _ctx.inputValue]]), (0, _vue.withDirectives)((0, _vue.createVNode)(_component_var_icon, {
    "var-counter-cover": "",
    name: "plus",
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('increment-button'), [!_ctx.incrementButton, _ctx.n('--hidden')])),
    style: (0, _vue.normalizeStyle)({
      width: _ctx.toSizeUnit(_ctx.buttonSize),
      height: _ctx.toSizeUnit(_ctx.buttonSize)
    }),
    onClick: _ctx.increment,
    onTouchstart: _ctx.pressIncrement,
    onTouchend: _ctx.releaseIncrement,
    onTouchcancel: _ctx.releaseIncrement
  }, null, 8
  /* PROPS */
  , ["class", "style", "onClick", "onTouchstart", "onTouchend", "onTouchcancel"]), [[_directive_ripple, {
    disabled: !_ctx.ripple || _ctx.disabled || _ctx.readonly || _ctx.disableIncrement || !_ctx.incrementButton || _ctx.isMax
  }]])], 16
  /* FULL_PROPS */
  ), (0, _vue.createVNode)(_component_var_form_details, {
    "error-message": _ctx.errorMessage
  }, null, 8
  /* PROPS */
  , ["error-message"])], 2
  /* CLASS */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarCounter',
  components: {
    VarIcon: _icon.default,
    VarFormDetails: _formDetails.default
  },
  directives: {
    Ripple: _ripple.default
  },
  inheritAttrs: false,
  props: _props.props,

  setup(props) {
    var inputValue = (0, _vue.ref)('');
    var incrementTimer;
    var decrementTimer;
    var incrementDelayTimer;
    var decrementDelayTimer;
    var {
      bindForm,
      form
    } = (0, _provide.useForm)();
    var {
      errorMessage,
      validateWithTrigger: vt,
      validate: v,
      // expose
      resetValidation
    } = (0, _components.useValidation)();
    var {
      readonly: formReadonly,
      disabled: formDisabled
    } = form != null ? form : {}; // expose

    var validate = () => v(props.rules, props.modelValue);

    var validateWithTrigger = trigger => {
      (0, _vue.nextTick)(() => {
        var {
          validateTrigger,
          rules,
          modelValue
        } = props;
        vt(validateTrigger, trigger, rules, modelValue);
      });
    }; // expose


    var reset = () => {
      var {
        min
      } = props;
      (0, _components.call)(props['onUpdate:modelValue'], min != null ? (0, _shared.toNumber)(min) : 0);
      resetValidation();
    };

    var counterProvider = {
      reset,
      validate,
      resetValidation
    };
    var isMax = (0, _vue.computed)(() => {
      var {
        max,
        modelValue
      } = props;
      return max != null && (0, _shared.toNumber)(modelValue) >= (0, _shared.toNumber)(max);
    });
    var isMin = (0, _vue.computed)(() => {
      var {
        min,
        modelValue
      } = props;
      return min != null && (0, _shared.toNumber)(modelValue) <= (0, _shared.toNumber)(min);
    });

    var normalizeValue = value => {
      var {
        decimalLength,
        max,
        min
      } = props;
      var num = (0, _shared.toNumber)(value);

      if (max != null && num > (0, _shared.toNumber)(max)) {
        num = (0, _shared.toNumber)(max);
      }

      if (min != null && num < (0, _shared.toNumber)(min)) {
        num = (0, _shared.toNumber)(min);
      }

      value = String(num);

      if (decimalLength != null) {
        value = num.toFixed((0, _shared.toNumber)(decimalLength));
      }

      return value;
    };

    var handleChange = event => {
      var {
        lazyChange,
        onBeforeChange
      } = props;
      var {
        value
      } = event.target;
      var normalizedValue = normalizeValue(value);
      lazyChange ? (0, _components.call)(onBeforeChange, (0, _shared.toNumber)(normalizedValue), change) : setNormalizedValue(normalizedValue);
      validateWithTrigger('onInputChange');
    };

    var decrement = () => {
      var {
        disabled,
        readonly,
        disableDecrement,
        decrementButton,
        lazyChange,
        step,
        modelValue,
        onDecrement,
        onBeforeChange
      } = props;

      if (formDisabled != null && formDisabled.value || formReadonly != null && formReadonly.value || disabled || readonly || disableDecrement || !decrementButton) {
        return;
      }

      if (isMin.value) {
        return;
      }

      var value = new _decimal.Decimal((0, _shared.toNumber)(modelValue)).minus(new _decimal.Decimal((0, _shared.toNumber)(step))).toString();
      var normalizedValue = normalizeValue(value);
      var normalizedValueNum = (0, _shared.toNumber)(normalizedValue);
      (0, _components.call)(onDecrement, normalizedValueNum);

      if (lazyChange) {
        (0, _components.call)(onBeforeChange, normalizedValueNum, change);
      } else {
        setNormalizedValue(normalizedValue);
        validateWithTrigger('onDecrement');
      }
    };

    var increment = () => {
      var {
        disabled,
        readonly,
        disableIncrement,
        incrementButton,
        lazyChange,
        step,
        modelValue,
        onIncrement,
        onBeforeChange
      } = props;

      if (formDisabled != null && formDisabled.value || formReadonly != null && formReadonly.value || disabled || readonly || disableIncrement || !incrementButton) {
        return;
      }

      if (isMax.value) {
        return;
      }

      var value = new _decimal.Decimal((0, _shared.toNumber)(modelValue)).plus(new _decimal.Decimal((0, _shared.toNumber)(step))).toString();
      var normalizedValue = normalizeValue(value);
      var normalizedValueNum = (0, _shared.toNumber)(normalizedValue);
      (0, _components.call)(onIncrement, normalizedValueNum);

      if (lazyChange) {
        (0, _components.call)(onBeforeChange, normalizedValueNum, change);
      } else {
        setNormalizedValue(normalizedValue);
        validateWithTrigger('onIncrement');
      }
    };

    var pressDecrement = () => {
      var {
        press,
        lazyChange
      } = props;

      if (!press || lazyChange) {
        return;
      }

      decrementDelayTimer = window.setTimeout(() => {
        continuedDecrement();
      }, DELAY);
    };

    var pressIncrement = () => {
      var {
        press,
        lazyChange
      } = props;

      if (!press || lazyChange) {
        return;
      }

      incrementDelayTimer = window.setTimeout(() => {
        continuedIncrement();
      }, DELAY);
    };

    var releaseDecrement = () => {
      decrementTimer && clearTimeout(decrementTimer);
      decrementDelayTimer && clearTimeout(decrementDelayTimer);
    };

    var releaseIncrement = () => {
      incrementTimer && clearTimeout(incrementTimer);
      incrementDelayTimer && clearTimeout(incrementDelayTimer);
    };

    var continuedIncrement = () => {
      incrementTimer = window.setTimeout(() => {
        increment();
        continuedIncrement();
      }, SPEED);
    };

    var continuedDecrement = () => {
      decrementTimer = window.setTimeout(() => {
        decrement();
        continuedDecrement();
      }, SPEED);
    };

    var setNormalizedValue = normalizedValue => {
      inputValue.value = normalizedValue;
      var normalizedValueNum = (0, _shared.toNumber)(normalizedValue);
      (0, _components.call)(props['onUpdate:modelValue'], normalizedValueNum);
    };

    var change = value => {
      setNormalizedValue(normalizeValue(String(value)));
      validateWithTrigger('onLazyChange');
    };

    (0, _components.call)(bindForm, counterProvider);
    (0, _vue.watch)(() => props.modelValue, newValue => {
      setNormalizedValue(normalizeValue(String(newValue)));
      (0, _components.call)(props.onChange, (0, _shared.toNumber)(newValue));
    });
    setNormalizedValue(normalizeValue(String(props.modelValue)));
    return {
      n,
      classes,
      inputValue,
      errorMessage,
      formDisabled,
      formReadonly,
      isMax,
      isMin,
      validate,
      reset,
      resetValidation,
      handleChange,
      decrement,
      increment,
      pressDecrement,
      pressIncrement,
      releaseDecrement,
      releaseIncrement,
      toSizeUnit: _elements.toSizeUnit,
      toNumber: _shared.toNumber
    };
  }

});

exports.default = _default;