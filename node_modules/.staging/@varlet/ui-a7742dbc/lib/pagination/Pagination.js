"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _menu = _interopRequireDefault(require("../menu"));

var _ripple = _interopRequireDefault(require("../ripple"));

var _icon = _interopRequireDefault(require("../icon"));

var _cell = _interopRequireDefault(require("../cell"));

var _input = _interopRequireDefault(require("../input"));

var _vue = require("vue");

var _porps = require("./porps");

var _shared = require("@varlet/shared");

var _locale = require("../locale");

var _components = require("../utils/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('pagination');

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = ["item-mode", "onClick"];

function render(_ctx, _cache) {
  var _component_var_icon = (0, _vue.resolveComponent)("var-icon");

  var _component_var_input = (0, _vue.resolveComponent)("var-input");

  var _component_var_cell = (0, _vue.resolveComponent)("var-cell");

  var _component_var_menu = (0, _vue.resolveComponent)("var-menu");

  var _directive_ripple = (0, _vue.resolveDirective)("ripple");

  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("ul", {
    class: (0, _vue.normalizeClass)(_ctx.n())
  }, [(0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('item'), _ctx.n('prev'), [_ctx.current <= 1 || _ctx.disabled, _ctx.n('item--disabled')], [_ctx.simple, _ctx.n('item--hover'), 'var-elevation--2'])),
    onClick: _cache[0] || (_cache[0] = $event => _ctx.clickItem('prev'))
  }, [(0, _vue.renderSlot)(_ctx.$slots, "prev", {}, () => [(0, _vue.createVNode)(_component_var_icon, {
    name: "chevron-left"
  })])], 2
  /* CLASS */
  )), [[_directive_ripple, {
    disabled: _ctx.current <= 1 || _ctx.disabled
  }]]), _ctx.simple ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", {
    key: 0,
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('simple'), [_ctx.disabled, _ctx.n('item--disabled')]))
  }, [(0, _vue.createVNode)(_component_var_input, {
    modelValue: _ctx.simpleValue,
    "onUpdate:modelValue": _cache[1] || (_cache[1] = $event => _ctx.simpleValue = $event),
    disabled: _ctx.disabled,
    "var-pagination-cover": "",
    onBlur: _cache[2] || (_cache[2] = $event => _ctx.setPage('simple', _ctx.simpleValue, $event)),
    onKeydown: _cache[3] || (_cache[3] = (0, _vue.withKeys)($event => _ctx.setPage('simple', _ctx.simpleValue, $event), ["enter"]))
  }, null, 8
  /* PROPS */
  , ["modelValue", "disabled"]), (0, _vue.createElementVNode)("span", null, "/ " + (0, _vue.toDisplayString)(_ctx.pageCount), 1
  /* TEXT */
  )], 2
  /* CLASS */
  )) : ((0, _vue.openBlock)(true), (0, _vue.createElementBlock)(_vue.Fragment, {
    key: 1
  }, (0, _vue.renderList)(_ctx.pageList, (item, index) => {
    return (0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", {
      key: _ctx.toNumber(item) + index,
      "item-mode": _ctx.getMode(item, index),
      class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('item'), 'var-elevation--2', [item === _ctx.current && !_ctx.disabled, _ctx.n('item--active')], [_ctx.isHideEllipsis(item, index), _ctx.n('item--hide')], [_ctx.disabled, _ctx.n('item--disabled')], [item === _ctx.current && _ctx.disabled, _ctx.n('item--disabled--active')])),
      onClick: $event => _ctx.clickItem(item, index)
    }, [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(item), 1
    /* TEXT */
    )], 10
    /* CLASS, PROPS */
    , _hoisted_1)), [[_directive_ripple, {
      disabled: _ctx.disabled
    }]]);
  }), 128
  /* KEYED_FRAGMENT */
  )), (0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('item'), _ctx.n('next'), [_ctx.current >= _ctx.pageCount || _ctx.disabled, _ctx.n('item--disabled')], [_ctx.simple, _ctx.n('item--hover'), 'var-elevation--2'])),
    onClick: _cache[4] || (_cache[4] = $event => _ctx.clickItem('next'))
  }, [(0, _vue.renderSlot)(_ctx.$slots, "next", {}, () => [(0, _vue.createVNode)(_component_var_icon, {
    name: "chevron-right"
  })])], 2
  /* CLASS */
  )), [[_directive_ripple, {
    disabled: _ctx.current >= _ctx.pageCount || _ctx.disabled
  }]]), _ctx.showSizeChanger ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", {
    key: 2,
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('size'), [_ctx.disabled, _ctx.n('item--disabled')]))
  }, [(0, _vue.createVNode)(_component_var_menu, {
    show: _ctx.menuVisible,
    "onUpdate:show": _cache[6] || (_cache[6] = $event => _ctx.menuVisible = $event),
    "offset-x": -4
  }, {
    menu: (0, _vue.withCtx)(() => [((0, _vue.openBlock)(true), (0, _vue.createElementBlock)(_vue.Fragment, null, (0, _vue.renderList)(_ctx.sizeOption, (option, index) => {
      return (0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_cell, {
        class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('list'), [_ctx.size === option, _ctx.n('list--active')])),
        key: index,
        onClick: $event => _ctx.clickSize(option)
      }, {
        default: (0, _vue.withCtx)(() => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(option) + (0, _vue.toDisplayString)(_ctx.pack.paginationItem) + " / " + (0, _vue.toDisplayString)(_ctx.pack.paginationPage), 1
        /* TEXT */
        )]),
        _: 2
        /* DYNAMIC */

      }, 1032
      /* PROPS, DYNAMIC_SLOTS */
      , ["class", "onClick"])), [[_directive_ripple]]);
    }), 128
    /* KEYED_FRAGMENT */
    ))]),
    default: (0, _vue.withCtx)(() => [(0, _vue.createElementVNode)("div", {
      class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('size--open'), [_ctx.current <= 1 || _ctx.disabled, _ctx.n('size--open--disabled')])),
      onClick: _cache[5] || (_cache[5] = function () {
        return _ctx.showMenu && _ctx.showMenu(...arguments);
      })
    }, [(0, _vue.createElementVNode)("span", null, (0, _vue.toDisplayString)(_ctx.size) + (0, _vue.toDisplayString)(_ctx.pack.paginationItem) + " / " + (0, _vue.toDisplayString)(_ctx.pack.paginationPage), 1
    /* TEXT */
    ), (0, _vue.createVNode)(_component_var_icon, {
      class: (0, _vue.normalizeClass)(_ctx.n('size--open-icon')),
      "var-pagination-cover": "",
      name: "menu-down"
    }, null, 8
    /* PROPS */
    , ["class"])], 2
    /* CLASS */
    )]),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["show"])], 2
  /* CLASS */
  )) : (0, _vue.createCommentVNode)("v-if", true), _ctx.showQuickJumper && !_ctx.simple ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", {
    key: 3,
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('quickly'), [_ctx.disabled, 'item--disabled']))
  }, [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.pack.paginationJump) + " ", 1
  /* TEXT */
  ), (0, _vue.createVNode)(_component_var_input, {
    modelValue: _ctx.inputValue,
    "onUpdate:modelValue": _cache[7] || (_cache[7] = $event => _ctx.inputValue = $event),
    disabled: _ctx.disabled,
    "var-pagination-cover": "",
    onBlur: _cache[8] || (_cache[8] = $event => _ctx.setPage('quick', _ctx.inputValue, $event)),
    onKeydown: _cache[9] || (_cache[9] = (0, _vue.withKeys)($event => _ctx.setPage('quick', _ctx.inputValue, $event), ["enter"]))
  }, null, 8
  /* PROPS */
  , ["modelValue", "disabled"])], 2
  /* CLASS */
  )) : (0, _vue.createCommentVNode)("v-if", true), _ctx.totalText ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", {
    key: 4,
    class: (0, _vue.normalizeClass)(_ctx.n('total'))
  }, (0, _vue.toDisplayString)(_ctx.totalText), 3
  /* TEXT, CLASS */
  )) : (0, _vue.createCommentVNode)("v-if", true)], 2
  /* CLASS */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarPagination',
  components: {
    VarMenu: _menu.default,
    VarIcon: _icon.default,
    VarCell: _cell.default,
    VarInput: _input.default
  },
  directives: {
    Ripple: _ripple.default
  },
  props: _porps.props,

  setup(props) {
    var menuVisible = (0, _vue.ref)(false);
    var inputValue = (0, _vue.ref)('');
    var simpleValue = (0, _vue.ref)('1');
    var isHideEllipsisHead = (0, _vue.ref)(false);
    var isHideEllipsisTail = (0, _vue.ref)(false);
    var current = (0, _vue.ref)((0, _shared.toNumber)(props.current) || 1);
    var size = (0, _vue.ref)((0, _shared.toNumber)(props.size) || 10);
    var pageList = (0, _vue.ref)([]);
    var activePosition = (0, _vue.computed)(() => Math.ceil(props.maxPagerCount / 2));
    var pageCount = (0, _vue.computed)(() => Math.ceil((0, _shared.toNumber)(props.total) / (0, _shared.toNumber)(size.value)));
    var range = (0, _vue.computed)(() => {
      var start = size.value * (current.value - 1) + 1;
      var end = Math.min(size.value * current.value, (0, _shared.toNumber)(props.total));
      return [start, end];
    });
    var totalText = (0, _vue.computed)(() => {
      if (!props.showTotal) return '';
      return props.showTotal((0, _shared.toNumber)(props.total), range.value);
    });

    var isHideEllipsis = (item, index) => {
      if ((0, _shared.isNumber)(item)) return false;
      return index === 1 ? isHideEllipsisHead.value : isHideEllipsisTail.value;
    };

    var getMode = (item, index) => {
      if ((0, _shared.isNumber)(item)) return 'basic';
      return index === 1 ? 'head' : 'tail';
    };

    var clickItem = (item, index) => {
      if (item === current.value || props.disabled) return;
      if ((0, _shared.isNumber)(item)) current.value = item;else if (item === 'prev') current.value > 1 && (current.value -= 1);else if (item === 'next') current.value < pageCount.value && (current.value += 1);else if (item === '...') {
        if (index === 1) {
          current.value = Math.max(current.value - props.maxPagerCount, 1);
        } else {
          current.value = Math.min(current.value + props.maxPagerCount, pageCount.value);
        }
      }
    };

    var showMenu = () => {
      if (props.disabled) return;
      menuVisible.value = true;
    };

    var clickSize = option => {
      size.value = option;
      menuVisible.value = false;
    };

    var isValidatePage = value => {
      var pattern = /^[1-9][0-9]*$/;
      return pattern.test(value);
    };

    var setPage = (type, value, event) => {
      ;
      event.target.blur();

      if (isValidatePage(value)) {
        var valueNum = (0, _shared.toNumber)(value);

        if (valueNum > pageCount.value) {
          valueNum = pageCount.value;
          simpleValue.value = "" + valueNum;
        }

        if (valueNum !== current.value) current.value = valueNum;
      }

      if (type === 'quick') inputValue.value = '';
      if (type === 'simple' && !isValidatePage(value)) simpleValue.value = "" + current.value;
    };

    (0, _vue.watch)([() => props.current, () => props.size], _ref => {
      var [newCurrent, newSize] = _ref;
      current.value = (0, _shared.toNumber)(newCurrent) || 1;
      size.value = (0, _shared.toNumber)(newSize || 10);
    });
    (0, _vue.watch)([current, size], (_ref2, _ref3) => {
      var _props$onUpdateCurre, _props$onUpdateSize;

      var [newCurrent, newSize] = _ref2;
      var [oldCurrent, oldSize] = _ref3;

      if (newCurrent > pageCount.value) {
        current.value = pageCount.value;
        return;
      }

      var list = [];
      var {
        maxPagerCount,
        total,
        onChange
      } = props;
      var oldCount = Math.ceil((0, _shared.toNumber)(total) / (0, _shared.toNumber)(oldSize));
      var rEllipseSign = pageCount.value - (maxPagerCount - activePosition.value) - 1;
      simpleValue.value = "" + newCurrent;

      if (pageCount.value - 2 > maxPagerCount) {
        if (oldCurrent === undefined || pageCount.value !== oldCount) {
          for (var i = 2; i < maxPagerCount + 2; i++) {
            list.push(i);
          }
        } // 左边不需要出现省略符号占位


        if (newCurrent <= maxPagerCount && newCurrent < rEllipseSign) {
          list = [];

          for (var _i = 1; _i < maxPagerCount + 1; _i++) {
            list.push(_i + 1);
          }

          isHideEllipsisHead.value = true;
          isHideEllipsisTail.value = false;
        } // 两边都需要出现省略符号占位


        if (newCurrent > maxPagerCount && newCurrent < rEllipseSign) {
          list = [];

          for (var _i2 = 1; _i2 < maxPagerCount + 1; _i2++) {
            list.push(newCurrent + _i2 - activePosition.value);
          } // 针对 maxPagerCount===1 的特殊处理


          isHideEllipsisHead.value = newCurrent === 2 && maxPagerCount === 1;
          isHideEllipsisTail.value = false;
        } // 右边不需要出现省略符号占位


        if (newCurrent >= rEllipseSign) {
          list = [];

          for (var _i3 = 1; _i3 < maxPagerCount + 1; _i3++) {
            list.push(pageCount.value - (maxPagerCount - _i3) - 1);
          }

          isHideEllipsisHead.value = false;
          isHideEllipsisTail.value = true;
        }

        list = [1, '...', ...list, '...', pageCount.value];
      } else {
        for (var _i4 = 1; _i4 <= pageCount.value; _i4++) {
          list.push(_i4);
        }
      }

      pageList.value = list;
      if (oldCurrent !== undefined && pageCount.value > 0) onChange == null ? void 0 : onChange(newCurrent, newSize);
      (_props$onUpdateCurre = props['onUpdate:current']) == null ? void 0 : _props$onUpdateCurre.call(props, newCurrent);
      (_props$onUpdateSize = props['onUpdate:size']) == null ? void 0 : _props$onUpdateSize.call(props, newSize);
    }, {
      immediate: true
    });
    return {
      n,
      classes,
      pack: _locale.pack,
      current,
      menuVisible,
      size,
      pageCount,
      pageList,
      inputValue,
      simpleValue,
      totalText,
      getMode,
      isHideEllipsis,
      clickItem,
      showMenu,
      clickSize,
      setPage,
      toNumber: _shared.toNumber
    };
  }

});

exports.default = _default;