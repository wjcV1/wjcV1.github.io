"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _formDetails = _interopRequireDefault(require("../form-details"));

var _icon = _interopRequireDefault(require("../icon"));

var _vue = require("vue");

var _props = require("./props");

var _shared = require("@varlet/shared");

var _components = require("../utils/components");

var _provide = require("../form/provide");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('input');

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = ["id", "disabled", "type", "value", "maxlength", "rows"];
var _hoisted_2 = ["id", "disabled", "type", "value", "maxlength"];
var _hoisted_3 = ["for"];

function render(_ctx, _cache) {
  var _component_var_icon = (0, _vue.resolveComponent)("var-icon");

  var _component_var_form_details = (0, _vue.resolveComponent)("var-form-details");

  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n(), 'var--box', [_ctx.disabled, _ctx.n('--disabled')])),
    onClick: _cache[10] || (_cache[10] = function () {
      return _ctx.handleClick && _ctx.handleClick(...arguments);
    })
  }, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('controller'), [_ctx.isFocus, _ctx.n('--focus')], [_ctx.errorMessage, _ctx.n('--error')], [_ctx.formDisabled || _ctx.disabled, _ctx.n('--disabled')])),
    style: (0, _vue.normalizeStyle)({
      color: !_ctx.errorMessage ? _ctx.isFocus ? _ctx.focusColor : _ctx.blurColor : undefined
    })
  }, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('icon'), [!_ctx.hint, _ctx.n('--non-hint')]))
  }, [(0, _vue.renderSlot)(_ctx.$slots, "prepend-icon")], 2
  /* CLASS */
  ), (0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('wrap'), [!_ctx.hint, _ctx.n('--non-hint')]))
  }, [_ctx.type === 'password' ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("input", {
    key: 0,
    class: (0, _vue.normalizeClass)(_ctx.n('autocomplete'))
  }, null, 2
  /* CLASS */
  )) : (0, _vue.createCommentVNode)("v-if", true), _ctx.textarea ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("textarea", {
    key: 1,
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('input'), _ctx.n('--textarea'), [_ctx.formDisabled || _ctx.disabled, _ctx.n('--disabled')], [_ctx.errorMessage, _ctx.n('--caret-error')])),
    ref: "el",
    autocomplete: "new-password",
    id: _ctx.id,
    disabled: _ctx.formDisabled || _ctx.disabled || _ctx.formReadonly || _ctx.readonly,
    type: _ctx.type,
    value: _ctx.modelValue,
    maxlength: _ctx.maxlength,
    rows: _ctx.rows,
    style: (0, _vue.normalizeStyle)({
      color: _ctx.textColor,
      caretColor: !_ctx.errorMessage ? _ctx.focusColor : undefined,
      resize: _ctx.resize ? 'vertical' : 'none'
    }),
    onFocus: _cache[0] || (_cache[0] = function () {
      return _ctx.handleFocus && _ctx.handleFocus(...arguments);
    }),
    onBlur: _cache[1] || (_cache[1] = function () {
      return _ctx.handleBlur && _ctx.handleBlur(...arguments);
    }),
    onInput: _cache[2] || (_cache[2] = function () {
      return _ctx.handleInput && _ctx.handleInput(...arguments);
    }),
    onChange: _cache[3] || (_cache[3] = function () {
      return _ctx.handleChange && _ctx.handleChange(...arguments);
    }),
    onTouchstart: _cache[4] || (_cache[4] = function () {
      return _ctx.handleTouchstart && _ctx.handleTouchstart(...arguments);
    })
  }, "\n        ", 46
  /* CLASS, STYLE, PROPS, HYDRATE_EVENTS */
  , _hoisted_1)) : ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("input", {
    key: 2,
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('input'), [_ctx.formDisabled || _ctx.disabled, _ctx.n('--disabled')], [_ctx.errorMessage, _ctx.n('--caret-error')])),
    ref: "el",
    autocomplete: "new-password",
    id: _ctx.id,
    disabled: _ctx.formDisabled || _ctx.disabled || _ctx.formReadonly || _ctx.readonly,
    type: _ctx.type,
    value: _ctx.modelValue,
    maxlength: _ctx.maxlength,
    style: (0, _vue.normalizeStyle)({
      color: _ctx.textColor,
      caretColor: !_ctx.errorMessage ? _ctx.focusColor : undefined
    }),
    onFocus: _cache[5] || (_cache[5] = function () {
      return _ctx.handleFocus && _ctx.handleFocus(...arguments);
    }),
    onBlur: _cache[6] || (_cache[6] = function () {
      return _ctx.handleBlur && _ctx.handleBlur(...arguments);
    }),
    onInput: _cache[7] || (_cache[7] = function () {
      return _ctx.handleInput && _ctx.handleInput(...arguments);
    }),
    onChange: _cache[8] || (_cache[8] = function () {
      return _ctx.handleChange && _ctx.handleChange(...arguments);
    }),
    onTouchstart: _cache[9] || (_cache[9] = function () {
      return _ctx.handleTouchstart && _ctx.handleTouchstart(...arguments);
    })
  }, null, 46
  /* CLASS, STYLE, PROPS, HYDRATE_EVENTS */
  , _hoisted_2)), (0, _vue.createElementVNode)("label", {
    class: (0, _vue.normalizeClass)(_ctx.classes('var--ellipsis', [_ctx.isFocus, _ctx.n('--focus')], [_ctx.errorMessage, _ctx.n('--error')], [_ctx.textarea, _ctx.n('textarea-placeholder'), _ctx.n('placeholder')], _ctx.computePlaceholderState(), [!_ctx.hint, _ctx.n('--placeholder-non-hint')])),
    style: (0, _vue.normalizeStyle)({
      color: !_ctx.errorMessage ? _ctx.isFocus ? _ctx.focusColor : _ctx.blurColor : undefined
    }),
    for: _ctx.id
  }, (0, _vue.toDisplayString)(_ctx.placeholder), 15
  /* TEXT, CLASS, STYLE, PROPS */
  , _hoisted_3)], 2
  /* CLASS */
  ), (0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('icon'), [!_ctx.hint, _ctx.n('--non-hint')]))
  }, [(0, _vue.renderSlot)(_ctx.$slots, "append-icon", {}, () => [_ctx.clearable && !_ctx.isEmpty(_ctx.modelValue) ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_icon, {
    key: 0,
    class: (0, _vue.normalizeClass)(_ctx.n('clear-icon')),
    "var-input-cover": "",
    name: "close-circle",
    size: "14px",
    onClick: _ctx.handleClear
  }, null, 8
  /* PROPS */
  , ["class", "onClick"])) : (0, _vue.createCommentVNode)("v-if", true)])], 2
  /* CLASS */
  )], 6
  /* CLASS, STYLE */
  ), _ctx.line ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    key: 0,
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('line'), [_ctx.formDisabled || _ctx.disabled, _ctx.n('--line-disabled')], [_ctx.errorMessage, _ctx.n('--line-error')])),
    style: (0, _vue.normalizeStyle)({
      background: !_ctx.errorMessage ? _ctx.blurColor : undefined
    })
  }, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('dot'), [_ctx.isFocus, _ctx.n('--spread')], [_ctx.formDisabled || _ctx.disabled, _ctx.n('--line-disabled')], [_ctx.errorMessage, _ctx.n('--line-error')])),
    style: (0, _vue.normalizeStyle)({
      background: !_ctx.errorMessage ? _ctx.focusColor : undefined
    })
  }, null, 6
  /* CLASS, STYLE */
  )], 6
  /* CLASS, STYLE */
  )) : (0, _vue.createCommentVNode)("v-if", true), (0, _vue.createVNode)(_component_var_form_details, {
    "error-message": _ctx.errorMessage,
    "maxlength-text": _ctx.maxlengthText
  }, null, 8
  /* PROPS */
  , ["error-message", "maxlength-text"])], 2
  /* CLASS */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarInput',
  components: {
    VarIcon: _icon.default,
    VarFormDetails: _formDetails.default
  },
  props: _props.props,

  setup(props) {
    var id = (0, _vue.ref)("var-input-" + (0, _vue.getCurrentInstance)().uid);
    var el = (0, _vue.ref)(null);
    var isFocus = (0, _vue.ref)(false);
    var maxlengthText = (0, _vue.computed)(() => {
      var {
        maxlength,
        modelValue
      } = props;

      if (!maxlength) {
        return '';
      }

      if ((0, _shared.isEmpty)(modelValue)) {
        return "0 / " + maxlength;
      }

      return String(modelValue).length + "/" + maxlength;
    });
    var {
      bindForm,
      form
    } = (0, _provide.useForm)();
    var {
      errorMessage,
      validateWithTrigger: vt,
      validate: v,
      // expose
      resetValidation
    } = (0, _components.useValidation)();

    var validateWithTrigger = trigger => {
      (0, _vue.nextTick)(() => {
        var {
          validateTrigger,
          rules,
          modelValue
        } = props;
        vt(validateTrigger, trigger, rules, modelValue);
      });
    };

    var computePlaceholderState = () => {
      var {
        hint,
        modelValue
      } = props;

      if (!hint && !(0, _shared.isEmpty)(modelValue)) {
        return n('--placeholder-hidden');
      }

      if (hint && (!(0, _shared.isEmpty)(modelValue) || isFocus.value)) {
        return n('--placeholder-hint');
      }
    };

    var handleFocus = e => {
      isFocus.value = true;
      (0, _components.call)(props.onFocus, e);
      validateWithTrigger('onFocus');
    };

    var handleBlur = e => {
      isFocus.value = false;
      (0, _components.call)(props.onBlur, e);
      validateWithTrigger('onBlur');
    };

    var handleInput = e => {
      var {
        value
      } = e.target;
      value = withTrim(value);
      (0, _components.call)(props['onUpdate:modelValue'], value);
      (0, _components.call)(props.onInput, value, e);
      validateWithTrigger('onInput');
    };

    var handleChange = e => {
      var {
        value
      } = e.target;
      (0, _components.call)(props.onChange, withTrim(value), e);
      validateWithTrigger('onChange');
    };

    var handleClear = () => {
      var {
        disabled,
        readonly,
        clearable,
        onClear
      } = props;

      if (form != null && form.disabled.value || form != null && form.readonly.value || disabled || readonly || !clearable) {
        return;
      }

      (0, _components.call)(props['onUpdate:modelValue'], '');
      (0, _components.call)(onClear, '');
      validateWithTrigger('onClear');
    };

    var handleClick = e => {
      var {
        disabled,
        onClick
      } = props;

      if (form != null && form.disabled.value || disabled) {
        return;
      }

      (0, _components.call)(onClick, e);
      validateWithTrigger('onClick');
    };

    var withTrim = value => props.modelModifiers.trim ? value.trim() : value;

    var handleTouchstart = e => {
      var {
        disabled,
        readonly
      } = props;

      if (form != null && form.disabled.value || form != null && form.readonly.value || disabled || readonly) {
        return;
      }

      e.stopPropagation();
    }; // expose


    var reset = () => {
      (0, _components.call)(props['onUpdate:modelValue'], '');
      resetValidation();
    }; // expose


    var validate = () => v(props.rules, props.modelValue); // expose


    var focus = () => {
      var _el$value;

      ;
      (_el$value = el.value) == null ? void 0 : _el$value.focus();
    }; // expose


    var blur = () => {
      ;
      el.value.blur();
    };

    var inputProvider = {
      reset,
      validate,
      resetValidation
    };
    (0, _components.call)(bindForm, inputProvider);
    (0, _vue.onMounted)(() => {
      if (props.autofocus) focus();
    });
    return {
      el,
      id,
      isFocus,
      errorMessage,
      maxlengthText,
      formDisabled: form == null ? void 0 : form.disabled,
      formReadonly: form == null ? void 0 : form.readonly,
      n,
      classes,
      isEmpty: _shared.isEmpty,
      computePlaceholderState,
      handleFocus,
      handleBlur,
      handleInput,
      handleChange,
      handleClear,
      handleClick,
      handleTouchstart,
      validate,
      resetValidation,
      reset,
      focus,
      blur
    };
  }

});

exports.default = _default;