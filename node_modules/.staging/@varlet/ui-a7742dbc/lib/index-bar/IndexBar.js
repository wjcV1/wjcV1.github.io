"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _vue = require("vue");

var _shared = require("@varlet/shared");

var _shared2 = require("../utils/shared");

var _elements = require("../utils/elements");

var _provide = require("./provide");

var _props = require("./props");

var _components = require("../utils/components");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('index-bar');

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = ["onClick"];

function render(_ctx, _cache) {
  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.n()),
    ref: "barEl"
  }, [(0, _vue.renderSlot)(_ctx.$slots, "default"), (0, _vue.createElementVNode)("ul", {
    class: (0, _vue.normalizeClass)(_ctx.n('anchor-list')),
    style: (0, _vue.normalizeStyle)({
      zIndex: _ctx.toNumber(_ctx.zIndex) + 2,
      display: _ctx.hideList ? 'none' : 'block'
    })
  }, [((0, _vue.openBlock)(true), (0, _vue.createElementBlock)(_vue.Fragment, null, (0, _vue.renderList)(_ctx.anchorNameList, anchorName => {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("li", {
      key: anchorName,
      class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('anchor-item'), [_ctx.active === anchorName, _ctx.n('anchor-item--active')])),
      style: (0, _vue.normalizeStyle)({
        color: _ctx.active === anchorName && _ctx.highlightColor ? _ctx.highlightColor : ''
      }),
      onClick: $event => _ctx.anchorClick(anchorName, true)
    }, (0, _vue.toDisplayString)(anchorName), 15
    /* TEXT, CLASS, STYLE, PROPS */
    , _hoisted_1);
  }), 128
  /* KEYED_FRAGMENT */
  ))], 6
  /* CLASS, STYLE */
  )], 2
  /* CLASS */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarIndexBar',
  props: _props.props,

  setup(props) {
    var {
      length,
      indexAnchors,
      bindIndexAnchors
    } = (0, _provide.useIndexAnchors)();
    var clickedName = (0, _vue.ref)('');
    var scroller = (0, _vue.ref)(null);
    var barEl = (0, _vue.ref)(null);
    var anchorNameList = (0, _vue.ref)([]);
    var active = (0, _vue.ref)();
    var sticky = (0, _vue.computed)(() => props.sticky);
    var cssMode = (0, _vue.computed)(() => props.cssMode);
    var stickyOffsetTop = (0, _vue.computed)(() => (0, _elements.toPxNum)(props.stickyOffsetTop));
    var zIndex = (0, _vue.computed)(() => props.zIndex);
    var indexBarProvider = {
      active,
      sticky,
      cssMode,
      stickyOffsetTop,
      zIndex
    };
    bindIndexAnchors(indexBarProvider);

    var emitEvent = anchor => {
      var anchorName = (0, _shared.isPlainObject)(anchor) ? anchor.name.value : anchor;
      if (anchorName === active.value || anchorName === undefined) return;
      active.value = anchorName;
      (0, _components.call)(props.onChange, anchorName);
    };

    var handleScroll = () => {
      var scrollTop = (0, _elements.getScrollTop)(scroller.value);
      var scrollHeight = scroller.value === window ? document.body.scrollHeight : scroller.value.scrollHeight;
      var {
        offsetTop
      } = barEl.value;
      indexAnchors.forEach((anchor, index) => {
        var anchorTop = anchor.ownTop.value;
        var top = scrollTop - anchorTop + stickyOffsetTop.value - offsetTop;
        var distance = index === indexAnchors.length - 1 ? scrollHeight : indexAnchors[index + 1].ownTop.value - anchor.ownTop.value;

        if (top >= 0 && top < distance && !clickedName.value) {
          if (index && !props.cssMode) {
            indexAnchors[index - 1].setDisabled(true);
          }

          anchor.setDisabled(false);
          emitEvent(anchor);
        }
      });
    };

    var anchorClick = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* (anchorName, manualCall) {
        var {
          offsetTop
        } = barEl.value;
        if (manualCall) (0, _components.call)(props.onClick, anchorName);
        if (anchorName === active.value) return;
        var indexAnchor = indexAnchors.find(_ref2 => {
          var {
            name
          } = _ref2;
          return anchorName === name.value;
        });
        if (!indexAnchor) return;
        var top = indexAnchor.ownTop.value - stickyOffsetTop.value + offsetTop;
        var left = (0, _elements.getScrollLeft)(scroller.value);
        clickedName.value = anchorName;
        emitEvent(anchorName);
        yield (0, _elements.scrollTo)(scroller.value, {
          left,
          top,
          animation: _shared2.easeInOutCubic,
          duration: (0, _shared.toNumber)(props.duration)
        });
        (0, _elements.nextTickFrame)(() => {
          clickedName.value = '';
        });
      });

      return function anchorClick(_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }(); // expose


    var scrollTo = index => {
      (0, _elements.requestAnimationFrame)(() => anchorClick(index));
    };

    (0, _vue.watch)(() => length.value, /*#__PURE__*/_asyncToGenerator(function* () {
      yield (0, _elements.doubleRaf)();
      indexAnchors.forEach(_ref4 => {
        var {
          name,
          setOwnTop
        } = _ref4;
        if (name.value) anchorNameList.value.push(name.value);
        setOwnTop();
      });
    }));
    (0, _vue.onMounted)( /*#__PURE__*/_asyncToGenerator(function* () {
      yield (0, _elements.doubleRaf)();
      scroller.value = (0, _elements.getParentScroller)(barEl.value);
      scroller.value.addEventListener('scroll', handleScroll);
    }));
    (0, _vue.onBeforeUnmount)(() => {
      (0, _components.call)(scroller.value.removeEventListener, 'scroll', handleScroll);
    });
    return {
      n,
      classes,
      barEl,
      active,
      zIndex,
      anchorNameList,
      toNumber: _shared.toNumber,
      scrollTo,
      anchorClick
    };
  }

});

exports.default = _default;