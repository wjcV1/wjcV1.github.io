"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _ripple = _interopRequireDefault(require("../ripple"));

var _loading = _interopRequireDefault(require("../loading"));

var _vue = require("vue");

var _props = require("./props");

var _components = require("../utils/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('button');

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = ["disabled"];

function render(_ctx, _cache) {
  var _component_var_loading = (0, _vue.resolveComponent)("var-loading");

  var _directive_ripple = (0, _vue.resolveDirective)("ripple");

  return (0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createElementBlock)("button", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n(), 'var--box', _ctx.n("--" + _ctx.size), [_ctx.block, "var--flex " + _ctx.n('--block'), 'var--inline-flex'], [_ctx.disabled, _ctx.n('--disabled')], [_ctx.text, _ctx.n("--text-" + _ctx.type) + " " + _ctx.n('--text'), _ctx.n("--" + _ctx.type) + " var-elevation--2"], [_ctx.text && _ctx.disabled, _ctx.n('--text-disabled')], [_ctx.round, _ctx.n('--round')], [_ctx.outline, _ctx.n('--outline')])),
    style: (0, _vue.normalizeStyle)({
      color: _ctx.textColor,
      background: _ctx.color
    }),
    disabled: _ctx.disabled,
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.handleClick && _ctx.handleClick(...arguments);
    }),
    onTouchstart: _cache[1] || (_cache[1] = function () {
      return _ctx.handleTouchstart && _ctx.handleTouchstart(...arguments);
    })
  }, [_ctx.loading || _ctx.pending ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_loading, {
    key: 0,
    class: (0, _vue.normalizeClass)(_ctx.n('loading')),
    "var-button-cover": "",
    type: _ctx.loadingType,
    size: _ctx.loadingSize,
    radius: _ctx.loadingRadius
  }, null, 8
  /* PROPS */
  , ["class", "type", "size", "radius"])) : (0, _vue.createCommentVNode)("v-if", true), (0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('content'), [_ctx.loading || _ctx.pending, _ctx.n('--hidden')]))
  }, [(0, _vue.renderSlot)(_ctx.$slots, "default")], 2
  /* CLASS */
  )], 46
  /* CLASS, STYLE, PROPS, HYDRATE_EVENTS */
  , _hoisted_1)), [[_directive_ripple, {
    disabled: _ctx.disabled || !_ctx.ripple
  }]]);
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarButton',
  components: {
    VarLoading: _loading.default
  },
  directives: {
    Ripple: _ripple.default
  },
  props: _props.props,

  setup(props) {
    var pending = (0, _vue.ref)(false);

    var attemptAutoLoading = result => {
      if (props.autoLoading) {
        pending.value = true;
        Promise.resolve(result).finally(() => {
          pending.value = false;
        });
      }
    };

    var handleClick = e => {
      var {
        loading,
        disabled,
        onClick
      } = props;

      if (!onClick || loading || disabled || pending.value) {
        return;
      }

      attemptAutoLoading(onClick(e));
    };

    var handleTouchstart = e => {
      var {
        loading,
        disabled,
        onTouchstart
      } = props;

      if (!onTouchstart || loading || disabled || pending.value) {
        return;
      }

      attemptAutoLoading(onTouchstart(e));
    };

    return {
      n,
      classes,
      pending,
      handleClick,
      handleTouchstart
    };
  }

});

exports.default = _default;