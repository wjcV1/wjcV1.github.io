"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _checkbox = _interopRequireDefault(require("../checkbox"));

var _ripple = _interopRequireDefault(require("../ripple"));

var _vue = require("vue");

var _provide = require("./provide");

var _components = require("../utils/components");

var _props = require("./props");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('option');

function render(_ctx, _cache) {
  var _component_var_checkbox = (0, _vue.resolveComponent)("var-checkbox");

  var _directive_ripple = (0, _vue.resolveDirective)("ripple");

  return (0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n(), 'var--box', [_ctx.optionSelected, _ctx.n('--selected-color')])),
    style: (0, _vue.normalizeStyle)({
      width: _ctx.wrapWidth,
      color: _ctx.optionSelected ? _ctx.focusColor : undefined
    }),
    onClick: _cache[2] || (_cache[2] = function () {
      return _ctx.handleClick && _ctx.handleClick(...arguments);
    })
  }, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('cover'), [_ctx.optionSelected, _ctx.n('--selected-background')])),
    style: (0, _vue.normalizeStyle)({
      background: _ctx.optionSelected ? _ctx.focusColor : undefined
    })
  }, null, 6
  /* CLASS, STYLE */
  ), _ctx.multiple ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_checkbox, {
    key: 0,
    ref: "checkbox",
    "checked-color": _ctx.focusColor,
    modelValue: _ctx.optionSelected,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => _ctx.optionSelected = $event),
    onClick: _cache[1] || (_cache[1] = (0, _vue.withModifiers)(() => {}, ["stop"])),
    onChange: _ctx.handleSelect
  }, null, 8
  /* PROPS */
  , ["checked-color", "modelValue", "onChange"])) : (0, _vue.createCommentVNode)("v-if", true), (0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n('text'), 'var--ellipsis'))
  }, [(0, _vue.renderSlot)(_ctx.$slots, "default", {}, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.label), 1
  /* TEXT */
  )])], 2
  /* CLASS */
  )], 6
  /* CLASS, STYLE */
  )), [[_directive_ripple]]);
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarOption',
  directives: {
    Ripple: _ripple.default
  },
  components: {
    VarCheckbox: _checkbox.default
  },
  props: _props.props,

  setup(props) {
    var optionSelected = (0, _vue.ref)(false);
    var selected = (0, _vue.computed)(() => optionSelected.value);
    var label = (0, _vue.computed)(() => props.label);
    var value = (0, _vue.computed)(() => props.value);
    var {
      select,
      bindSelect
    } = (0, _provide.useSelect)();
    var {
      wrapWidth,
      multiple,
      focusColor,
      onSelect
    } = select;

    var handleClick = () => {
      optionSelected.value = !optionSelected.value;
      onSelect(optionProvider);
    };

    var handleSelect = () => onSelect(optionProvider);

    var sync = checked => {
      optionSelected.value = checked;
    };

    var optionProvider = {
      label,
      value,
      selected,
      sync
    };
    (0, _vue.watch)([() => props.label, () => props.value], () => {
      if (props.label == null && props.value == null) {
        throw Error("Props label and value can't both be undefined\n");
      }
    }, {
      immediate: true
    });
    bindSelect(optionProvider);
    return {
      n,
      classes,
      optionSelected,
      wrapWidth,
      multiple,
      focusColor,
      handleClick,
      handleSelect
    };
  }

});

exports.default = _default;