"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _icon = _interopRequireDefault(require("../icon"));

var _vue = require("vue");

var _props = require("./props");

var _components = require("../utils/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('chip');

function render(_ctx, _cache) {
  var _component_var_icon = (0, _vue.resolveComponent)("var-icon");

  return (0, _vue.openBlock)(), (0, _vue.createBlock)(_vue.Transition, {
    name: "var-fade"
  }, {
    default: (0, _vue.withCtx)(() => [(0, _vue.createElementVNode)("span", (0, _vue.mergeProps)({
      class: _ctx.classes(_ctx.n(), 'var--box', ..._ctx.contentClass),
      style: _ctx.chipStyles
    }, _ctx.$attrs), [(0, _vue.renderSlot)(_ctx.$slots, "left"), (0, _vue.createElementVNode)("span", {
      class: (0, _vue.normalizeClass)(_ctx.n("text-" + _ctx.size))
    }, [(0, _vue.renderSlot)(_ctx.$slots, "default")], 2
    /* CLASS */
    ), (0, _vue.renderSlot)(_ctx.$slots, "right"), _ctx.closable ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("span", {
      key: 0,
      class: (0, _vue.normalizeClass)(_ctx.n('--close')),
      onClick: _cache[0] || (_cache[0] = function () {
        return _ctx.onClose && _ctx.onClose(...arguments);
      })
    }, [(0, _vue.createVNode)(_component_var_icon, {
      name: "" + (_ctx.iconName ? _ctx.iconName : 'close-circle')
    }, null, 8
    /* PROPS */
    , ["name"])], 2
    /* CLASS */
    )) : (0, _vue.createCommentVNode)("v-if", true)], 16
    /* FULL_PROPS */
    )]),
    _: 3
    /* FORWARDED */

  });
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarChip',
  components: {
    VarIcon: _icon.default
  },
  inheritAttrs: false,
  props: _props.props,

  setup(props) {
    var chipStyles = (0, _vue.computed)(() => {
      var {
        plain,
        textColor,
        color
      } = props;

      if (plain) {
        return {
          color: textColor || color,
          borderColor: color
        };
      }

      return {
        color: textColor,
        background: color
      };
    });
    var contentClass = (0, _vue.computed)(() => {
      var {
        size,
        block,
        type,
        plain,
        round
      } = props;
      var blockClass = block ? 'var--flex' : 'var--inline-flex';
      var plainTypeClass = plain ? n('plain') + " " + n("plain-" + type) : n("--" + type);
      var roundClass = round ? n('--round') : null;
      return [n("--" + size), blockClass, plainTypeClass, roundClass];
    });
    return {
      n,
      classes,
      chipStyles,
      contentClass
    };
  }

});

exports.default = _default;