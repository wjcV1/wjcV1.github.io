"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.render = render;

var _formDetails = _interopRequireDefault(require("../form-details"));

var _vue = require("vue");

var _props = require("./props");

var _components = require("../utils/components");

var _provide = require("./provide");

var _provide2 = require("../form/provide");

var _shared = require("@varlet/shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var {
  n,
  classes
} = (0, _components.createNamespace)('checkbox-group');

function render(_ctx, _cache) {
  var _component_var_form_details = (0, _vue.resolveComponent)("var-form-details");

  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(_ctx.n('wrap'))
  }, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.classes(_ctx.n(), _ctx.n("--" + _ctx.direction)))
  }, [(0, _vue.renderSlot)(_ctx.$slots, "default")], 2
  /* CLASS */
  ), (0, _vue.createVNode)(_component_var_form_details, {
    "error-message": _ctx.errorMessage
  }, null, 8
  /* PROPS */
  , ["error-message"])], 2
  /* CLASS */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarCheckboxGroup',
  components: {
    VarFormDetails: _formDetails.default
  },
  props: _props.props,

  setup(props) {
    var max = (0, _vue.computed)(() => props.max);
    var checkedCount = (0, _vue.computed)(() => props.modelValue.length);
    var {
      length,
      checkboxes,
      bindCheckboxes
    } = (0, _provide.useCheckboxes)();
    var {
      bindForm
    } = (0, _provide2.useForm)();
    var {
      errorMessage,
      validateWithTrigger: vt,
      validate: v,
      // expose
      resetValidation
    } = (0, _components.useValidation)();
    var checkboxGroupErrorMessage = (0, _vue.computed)(() => errorMessage.value);

    var validateWithTrigger = trigger => {
      (0, _vue.nextTick)(() => {
        var {
          validateTrigger,
          rules,
          modelValue
        } = props;
        vt(validateTrigger, trigger, rules, modelValue);
      });
    };

    var change = changedModelValue => {
      (0, _components.call)(props['onUpdate:modelValue'], changedModelValue);
      (0, _components.call)(props.onChange, changedModelValue);
      validateWithTrigger('onChange');
    };

    var onChecked = changedValue => {
      var {
        modelValue
      } = props;

      if (!modelValue.includes(changedValue)) {
        change([...modelValue, changedValue]);
      }
    };

    var onUnchecked = changedValue => {
      var {
        modelValue
      } = props;

      if (!modelValue.includes(changedValue)) {
        return;
      }

      change(modelValue.filter(value => value !== changedValue));
    };

    var syncCheckboxes = () => checkboxes.forEach(_ref => {
      var {
        sync
      } = _ref;
      return sync(props.modelValue);
    });

    var resetWithAnimation = () => {
      checkboxes.forEach(checkbox => checkbox.resetWithAnimation());
    }; // expose


    var checkAll = () => {
      var checkedValues = checkboxes.map(_ref2 => {
        var {
          checkedValue
        } = _ref2;
        return checkedValue.value;
      });
      var changedModelValue = (0, _shared.uniq)(checkedValues);
      resetWithAnimation();
      (0, _components.call)(props['onUpdate:modelValue'], changedModelValue);
      return changedModelValue;
    }; // expose


    var inverseAll = () => {
      var checkedValues = checkboxes.filter(_ref3 => {
        var {
          checked
        } = _ref3;
        return !checked.value;
      }).map(_ref4 => {
        var {
          checkedValue
        } = _ref4;
        return checkedValue.value;
      });
      var changedModelValue = (0, _shared.uniq)(checkedValues);
      resetWithAnimation();
      (0, _components.call)(props['onUpdate:modelValue'], changedModelValue);
      return changedModelValue;
    }; // expose


    var reset = () => {
      (0, _components.call)(props['onUpdate:modelValue'], []);
      resetValidation();
    }; // expose


    var validate = () => v(props.rules, props.modelValue);

    (0, _vue.watch)(() => props.modelValue, syncCheckboxes, {
      deep: true
    });
    (0, _vue.watch)(() => length.value, syncCheckboxes);
    var checkboxGroupProvider = {
      max,
      checkedCount,
      onChecked,
      onUnchecked,
      validate,
      resetValidation,
      reset,
      errorMessage: checkboxGroupErrorMessage
    };
    bindCheckboxes(checkboxGroupProvider);
    (0, _components.call)(bindForm, checkboxGroupProvider);
    return {
      errorMessage,
      n,
      classes,
      checkAll,
      inverseAll,
      reset,
      validate,
      resetValidation
    };
  }

});

exports.default = _default;